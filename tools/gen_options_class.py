# Download the property info from http://localhost:5820/admin/config_properties, and save as data.json
from stardog2.connector.client import Client

header = """# THIS CLASS IS AUTO GENERATED BY gen_options_class, DO NOT EDIT
from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Field, Extra, constr

duration = constr(regex=r'^\d+(ms|s|m|h)$')
iri = constr(regex=":")  # must have a :
namespace = constr(regex="^[A-Za-z0-9]*=.+:.+$")
schema_graph = constr(regex=":")  # must have a :
sensitive_property_group = constr(regex="^[A-Za-z0-9]*=.+:.+$")


"""


def process_meta_data(cfg: dict):
    result = []
    enums = []
    option_enum = [
        "class DatabaseOptionEnum(str, Enum):",
        '\t"""An enum of all database options"""',
    ]

    config = [
        "",
        "",
        "\tclass Config:",
        "\t\textra = Extra.forbid",
        "\t\tallow_population_by_field_name = True",
        "",
        "",
    ]
    create = [
        "class AllDatabaseOptions(BaseModel):",
        '\t"""Options available when creating a database',
        "",
        "\tArgs:",
    ]
    online = [
        "class OnlineDatabaseOptions(BaseModel):",
        '\t"""Options that can be modified when database is online',
        "",
    ]
    offline = [
        "class OfflineDatabaseOptions(BaseModel):",
        '\t"""Options that can be modified when database is offline',
        "",
    ]

    create_fields = []
    online_fields = []
    offline_fields = []
    types = {
        "Boolean": "bool",
        "String": "str",
        "Duration": "duration",
        "Namespace": "str",  # maybe we can improve this
        "IRI": "str",  # maybe we can improve this
        "SchemaGraph": "str",  # maybe we can improve this
        "Long": "int",
        "Integer": "int",
        "Double": "float",
        "SensitiveProperty": "sensitive_property_group",
    }

    for key in cfg:
        record = cfg[key]
        alias: str = key
        fieldname: str = alias.replace(".", "_")

        if record["type"] == "Enum":
            kind = "".join(x.capitalize() or "_" for x in fieldname.split("_"))
            enums.append(f"class {kind}(str, Enum):")

            for item in record["possibleValues"]:
                enums.append(f'\t{item.upper()} = "{item}"')

            enums.extend(["", ""])
        else:
            keys = record.keys()
            if "defaultValue" in keys and isinstance(record["defaultValue"], list):
                kind = f"List[{types[record['type']]}]"
            else:
                kind = types[record["type"]]

        description: str = record["description"]

        field = f'\t{fieldname}: Optional[{kind}] = Field(\n\t\talias="{alias}",\n\t\tdescription="""{description}""",\n\t\tdefault=None\n\t)'
        field_info = f"\t\t{fieldname}: {description}\n"

        option_enum.append(f'\t{fieldname.upper()} = "{alias}"')

        if record["mutable"]:
            if record["mutableWhenOnline"]:
                create.append(field_info)
                create_fields.append(field)
                online.append(field_info)
                online_fields.append(field)
                offline.append(field_info)
                offline_fields.append(field)
            else:
                create.append(field_info)
                create_fields.append(field)
                offline.append(field_info)
                offline_fields.append(field)
        else:
            create.append(field_info)
            create_fields.append(field)

    create.extend(['"""', "", ""])
    offline.extend(['"""', "", ""])
    online.extend(['"""', "", ""])
    option_enum.extend(["", ""])

    create_fields.extend(
        [
            "",
            "\t@classmethod",
            "\tdef get_options(cls):",
            '\t\treturn list(cls.schema(True).get("properties").keys())',
        ]
    )

    create_fields.extend(config)
    offline_fields.extend(config)
    online_fields.extend(config)

    result.extend(enums)
    result.extend(option_enum)
    result.extend(create)
    result.extend(create_fields)
    result.extend(offline)
    result.extend(offline_fields)
    result.extend(online)
    result.extend(online_fields)

    return "\n".join(result)


client = Client()
version = client.get("/admin/status").json()["dbms.version"]["value"]

r = client.get("/admin/config_properties")

res = process_meta_data(r.json())

with open("../stardog2/database_options.py", "w") as f:
    f.write(
        f"# This class is auto generated from Stardog {version} BY gen_options_class.py, DO NOT EDIT"
    )
    f.write(header)
    f.write(res)

    f.write(
        "\nMutableDatabaseOptions = Union[OnlineDatabaseOptions, OfflineDatabaseOptions]\n"
    )
