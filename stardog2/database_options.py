# This class is auto generated from Stardog 8.2.1 BY gen_options_class.py, DO NOT EDIT# THIS CLASS IS AUTO GENERATED BY gen_options_class, DO NOT EDIT
from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Field, Extra, constr

duration = constr(regex=r'^\d+(ms|s|m|h)$')
iri = constr(regex=":")  # must have a :
namespace = constr(regex="^[A-Za-z0-9]*=.+:.+$")
schema_graph = constr(regex=":")  # must have a :
sensitive_property_group = constr(regex="^[A-Za-z0-9]*=.+:.+$")


class GraphqlAutoSchemaSource(str, Enum):
	OWL = "owl"
	SHACL = "shacl"
	VIRTUAL = "virtual"


class IndexStatisticsOnDbCreate(str, Enum):
	SYNC = "Sync"
	ASYNC = "Async"
	OFF = "Off"


class LiteralLanguageNormalization(str, Enum):
	DEFAULT = "DEFAULT"
	RFC3066 = "RFC3066"
	BCP47 = "BCP47"


class QueryInlineSqs(str, Enum):
	NEVER = "NEVER"
	OPTIMIZER = "OPTIMIZER"
	ALWAYS = "ALWAYS"


class QueryMemoryExceedsStrategy(str, Enum):
	SPILL_TO_DISK = "SPILL_TO_DISK"
	FINISH_QUERY_EXECUTION = "FINISH_QUERY_EXECUTION"


class QueryPlanReuse(str, Enum):
	ALWAYS = "ALWAYS"
	NEVER = "NEVER"
	CARDINALITY = "CARDINALITY"


class ReasoningRewriting(str, Enum):
	PER_SCOPE = "PER_SCOPE"
	PER_PATTERN = "PER_PATTERN"


class ReasoningSameas(str, Enum):
	OFF = "OFF"
	ON = "ON"
	FULL = "FULL"


class ReasoningType(str, Enum):
	NONE = "NONE"
	SAMEAS = "SAMEAS"
	RDFS = "RDFS"
	QL = "QL"
	EL = "EL"
	RL = "RL"
	DL = "DL"
	SL = "SL"


class SearchDefaultQueryOperator(str, Enum):
	AND = "AND"
	OR = "OR"


class SearchIndexState(str, Enum):
	CLEAN = "Clean"
	DIRTY = "Dirty"
	PHANTOMS = "Phantoms"


class SqlSchemaAutoSource(str, Enum):
	OWL = "owl"
	SHACL = "shacl"
	VIRTUAL = "virtual"


class TransactionIsolation(str, Enum):
	SNAPSHOT = "SNAPSHOT"
	SERIALIZABLE = "SERIALIZABLE"


class TransactionWriteConflictStrategy(str, Enum):
	LAST_COMMIT_WINS = "LAST_COMMIT_WINS"
	ABORT_ON_CONFLICT = "ABORT_ON_CONFLICT"


class DatabaseOptionEnum(str, Enum):
	"""An enum of all database options"""
	AUTO_SCHEMA_REASONING = "auto.schema.reasoning"
	DATABASE_ARCHETYPES = "database.archetypes"
	DATABASE_BULK_LOAD_STREAM_ARGS = "database.bulk.load.stream.args"
	DATABASE_BULK_LOAD_STREAM_FACTORY = "database.bulk.load.stream.factory"
	DATABASE_CONNECTION_TIMEOUT = "database.connection.timeout"
	DATABASE_IGNORE_BULK_LOAD_ERRORS = "database.ignore.bulk.load.errors"
	DATABASE_NAME = "database.name"
	DATABASE_NAMESPACES = "database.namespaces"
	DATABASE_ONLINE = "database.online"
	DATABASE_TYPE = "database.type"
	DOCS_DEFAULT_RDF_EXTRACTORS = "docs.default.rdf.extractors"
	DOCS_DEFAULT_TEXT_EXTRACTORS = "docs.default.text.extractors"
	DOCS_FILESYSTEM_URI = "docs.filesystem.uri"
	DOCS_OPENNLP_MODELS_PATH = "docs.opennlp.models.path"
	DOCS_PATH = "docs.path"
	DOCS_S3_PROTOCOL = "docs.s3.protocol"
	EDGE_PROPERTIES = "edge.properties"
	GRAPH_ALIASES = "graph.aliases"
	GRAPHQL_AUTO_SCHEMA = "graphql.auto.schema"
	GRAPHQL_AUTO_SCHEMA_SOURCE = "graphql.auto.schema.source"
	GRAPHQL_DATA_GRAPHS = "graphql.data.graphs"
	GRAPHQL_DEFAULT_LIMIT = "graphql.default.limit"
	GRAPHQL_RESULT_MEMORY_LIMIT = "graphql.result.memory.limit"
	ICV_ACTIVE_GRAPHS = "icv.active.graphs"
	ICV_CONSISTENCY_AUTOMATIC = "icv.consistency.automatic"
	ICV_ENABLED = "icv.enabled"
	ICV_EXPLANATION_LIMIT = "icv.explanation.limit"
	ICV_REASONING_ENABLED = "icv.reasoning.enabled"
	INDEX_BULK_LOAD_SST_TXLIMIT = "index.bulk.load.sst.txlimit"
	INDEX_DIFFERENTIAL_ENABLE_LIMIT = "index.differential.enable.limit"
	INDEX_DIFFERENTIAL_MERGE_LIMIT = "index.differential.merge.limit"
	INDEX_LITERALS_CANONICAL = "index.literals.canonical"
	INDEX_LITERALS_LIMIT = "index.literals.limit"
	INDEX_LITERALS_MERGE_LIMIT = "index.literals.merge.limit"
	INDEX_LITERALS_PROPERTIES = "index.literals.properties"
	INDEX_LUCENE_MMAP = "index.lucene.mmap"
	INDEX_STATISTICS_CACHE_CAPACITY = "index.statistics.cache.capacity"
	INDEX_STATISTICS_CHAINS_ENABLED = "index.statistics.chains.enabled"
	INDEX_STATISTICS_CHARACTERISTIC_LIMIT = "index.statistics.characteristic.limit"
	INDEX_STATISTICS_ENABLE_ACTIVE_GRAPH = "index.statistics.enable_active_graph"
	INDEX_STATISTICS_ON_DB_CREATE = "index.statistics.on_db_create"
	INDEX_STATISTICS_PREDICATE_THRESHOLD = "index.statistics.predicate.threshold"
	INDEX_STATISTICS_RANGES_ENABLED = "index.statistics.ranges.enabled"
	INDEX_STATISTICS_SKETCH_CAPACITY = "index.statistics.sketch.capacity"
	INDEX_STATISTICS_UPDATE_AUTOMATIC = "index.statistics.update.automatic"
	INDEX_STATISTICS_UPDATE_BLOCKING_RATIO = "index.statistics.update.blocking.ratio"
	INDEX_STATISTICS_UPDATE_MIN_SIZE = "index.statistics.update.min.size"
	INDEX_STATISTICS_UPDATE_RATIO = "index.statistics.update.ratio"
	INDEX_WRITER_MERGE_LIMIT = "index.writer.merge.limit"
	LDAP_ROLE_MAPPINGS = "ldap.role.mappings"
	LDAP_SUPERUSERS_GROUP = "ldap.superusers.group"
	LDAP_USER_CLASS_FILTER = "ldap.user.class.filter"
	LDAP_USER_DN_TEMPLATES = "ldap.user.dn.templates"
	LDAP_USER_NAME_ATTRIBUTE = "ldap.user.name.attribute"
	LITERAL_COMPARISON_EXTENDED = "literal.comparison.extended"
	LITERAL_LANGUAGE_NORMALIZATION = "literal.language.normalization"
	LOCAL_IRI_TEMPLATE_EXCLUDES = "local.iri.template.excludes"
	LOCAL_IRI_TEMPLATE_INCLUDES = "local.iri.template.includes"
	PRESERVE_BNODE_IDS = "preserve.bnode.ids"
	PROGRESS_MONITOR_ENABLED = "progress.monitor.enabled"
	QUERY_ALL_GRAPHS = "query.all.graphs"
	QUERY_DESCRIBE_STRATEGY = "query.describe.strategy"
	QUERY_DICTIONARY_OVERFLOW_THRESHOLD = "query.dictionary.overflow.threshold"
	QUERY_INLINE_SQS = "query.inline.sqs"
	QUERY_MEMORY_EXCEEDS_STRATEGY = "query.memory.exceeds.strategy"
	QUERY_MEMORY_LIMIT = "query.memory.limit"
	QUERY_PLAN_REUSE = "query.plan.reuse"
	QUERY_TIMEOUT = "query.timeout"
	QUERY_UPDATE_GRAPH_DIFF = "query.update.graph.diff"
	QUERY_UPDATE_TIMEOUT = "query.update.timeout"
	REASONING_APPROXIMATE = "reasoning.approximate"
	REASONING_CLASSIFY_EAGER = "reasoning.classify.eager"
	REASONING_CONSISTENCY_AUTOMATIC = "reasoning.consistency.automatic"
	REASONING_PRECOMPUTE_NON_EMPTY_PREDICATES = "reasoning.precompute.non_empty.predicates"
	REASONING_PUNNING_ENABLED = "reasoning.punning.enabled"
	REASONING_REWRITING = "reasoning.rewriting"
	REASONING_SAMEAS = "reasoning.sameas"
	REASONING_SCHEMA_GRAPHS = "reasoning.schema.graphs"
	REASONING_SCHEMA_TIMEOUT = "reasoning.schema.timeout"
	REASONING_SCHEMAS = "reasoning.schemas"
	REASONING_SCHEMAS_MEMORY_COUNT = "reasoning.schemas.memory.count"
	REASONING_TYPE = "reasoning.type"
	REASONING_VIRTUAL_GRAPH_ENABLED = "reasoning.virtual.graph.enabled"
	SEARCH_DEFAULT_LIMIT = "search.default.limit"
	SEARCH_DEFAULT_QUERY_OPERATOR = "search.default.query.operator"
	SEARCH_ENABLED = "search.enabled"
	SEARCH_INDEX_COMPUTE_NORM = "search.index.compute.norm"
	SEARCH_INDEX_CONTEXTS_EXCLUDED = "search.index.contexts.excluded"
	SEARCH_INDEX_CONTEXTS_FILTER = "search.index.contexts.filter"
	SEARCH_INDEX_DATATYPES = "search.index.datatypes"
	SEARCH_INDEX_PROPERTIES_EXCLUDED = "search.index.properties.excluded"
	SEARCH_INDEX_PROPERTIES_INCLUDED = "search.index.properties.included"
	SEARCH_INDEX_STATE = "search.index.state"
	SEARCH_INDEX_STOPWORDS = "search.index.stopwords"
	SEARCH_INDEX_TOKEN_FILTERS = "search.index.token.filters"
	SEARCH_INDEX_VACUUM = "search.index.vacuum"
	SEARCH_INDEX_WORDBREAK_CHARS = "search.index.wordbreak.chars"
	SEARCH_PAGE_SIZE = "search.page.size"
	SEARCH_REINDEX_CACHE_SIZE = "search.reindex.cache.size"
	SEARCH_REINDEX_TX = "search.reindex.tx"
	SEARCH_WILDCARD_SEARCH_ENABLED = "search.wildcard.search.enabled"
	SECURITY_MASKING_FUNCTION = "security.masking.function"
	SECURITY_NAMED_GRAPHS = "security.named.graphs"
	SECURITY_PROPERTIES_SENSITIVE = "security.properties.sensitive"
	SECURITY_PROPERTIES_SENSITIVE_GROUPS = "security.properties.sensitive.groups"
	SERVICE_SPARQL_CREDENTIALS_PASSTHROUGH_REGEX = "service.sparql.credentials.passthrough.regex"
	SERVICE_SPARQL_RESULT_LIMIT = "service.sparql.result.limit"
	SHACL_SHAPE_GRAPHS = "shacl.shape.graphs"
	SHACL_TARGETCLASS_SIMPLE = "shacl.targetClass.simple"
	SHACL_VIOLATION_LIMIT_SHAPE = "shacl.violation.limit.shape"
	SPATIAL_DISTANCE_PRECISION = "spatial.distance.precision"
	SPATIAL_ENABLED = "spatial.enabled"
	SPATIAL_ERROR_PERCENTAGE = "spatial.error.percentage"
	SPATIAL_PRECISION = "spatial.precision"
	SPATIAL_RESULT_LIMIT = "spatial.result.limit"
	SPATIAL_RESULT_PAGE_SIZE = "spatial.result.page_size"
	SPATIAL_USE_JTS = "spatial.use.jts"
	SQL_DATA_GRAPHS = "sql.data.graphs"
	SQL_SCHEMA_AUTO = "sql.schema.auto"
	SQL_SCHEMA_AUTO_SOURCE = "sql.schema.auto.source"
	SQL_SCHEMA_GRAPH = "sql.schema.graph"
	STRICT_PARSING = "strict.parsing"
	TRANSACTION_COMMIT_TWOPHASE = "transaction.commit.twophase"
	TRANSACTION_ISOLATION = "transaction.isolation"
	TRANSACTION_LOGGING = "transaction.logging"
	TRANSACTION_LOGGING_ROTATION_KEEP_BACKUPS = "transaction.logging.rotation.keep_backups"
	TRANSACTION_LOGGING_ROTATION_REMOVE = "transaction.logging.rotation.remove"
	TRANSACTION_LOGGING_ROTATION_SIZE = "transaction.logging.rotation.size"
	TRANSACTION_LOGGING_USE_ROTATED = "transaction.logging.use.rotated"
	TRANSACTION_WRITE_CONFLICT_STRATEGY = "transaction.write.conflict.strategy"
	VIRTUAL_TRANSPARENCY = "virtual.transparency"


class AllDatabaseOptions(BaseModel):
	"""Options available when creating a database

	Args:
		auto_schema_reasoning: Enables reasoning when automatically generating schemas from OWL. This setting will affect automatic schema generation for GraphQL (if graphql.auto.schema is enabled) and BI/SQL (if sql.schema.auto is enabled).

		database_archetypes: The name of one or more database archetypes, used to associate ontologies and constraints with new databases. See the docs for instructions to create your own archetype.

		database_bulk_load_stream_args: Arguments to be passed to the stream factory for configuring the details of the stream instances that will be created. The value should be a ';' separated list of key value pairs separated by ':'. For example, 'subjects: 5; graphs: 3'.

		database_bulk_load_stream_factory: Fully qualified class name denoting an implementation of the RDFStreamFactory interface that will be used to load data into the newly created database. This option only takes effect at db creation time. The configuration of the RDFStream instances created is defined via the option database.bulk.load.stream.args.

		database_connection_timeout: The amount of time a connection to the database can be open, but inactive, before being automatically closed to reclaim the resources. The following unit suffixes are available: "ms" for milliseconds, "s" for seconds, "m" for minutes, and "h" for hours.

		database_ignore_bulk_load_errors: Option for whether or not to ignore errors encountered while loading data at db creation time. By default, these errors are ignored and db creation will continue with as much data as loaded.

		database_name: A database name, the legal value of which is given by the regular expression [A-Za-z]{1}[A-Za-z0-9_-]

		database_namespaces: The default namespaces for the database. Legal input is a comma-separated list of <prefix>=<namespace> values.

		database_online: Whether or not the database is online

		database_type: Specifies the database as either user or system.

		docs_default_rdf_extractors: Comma-separated list of names of RDF extractors to use when processing documents when no RDF extractor names are given. Built-in extractors include tika, text, entities, linked and dictionary. See the docs for instructions to create your own.

		docs_default_text_extractors: Comma-separated list of names of text extractors to use when processing documents when no text extractor names are given. See the docs to create your own.

		docs_filesystem_uri: A URI indicating which FileSystem provider to use for document storage. In addition to local storage (file:///), documents can be stored on Amazon S3 (s3:///) or document storage can be disabled altogether (none)

		docs_opennlp_models_path: The directory where OpenNLP models are located

		docs_path: The path under which documents will be stored. A relative path is relative to the database directory. S3 storage should specify an absolute path with the bucket name as the first part of the path

		docs_s3_protocol: Protocol used when storing unstructured text documents on S3 (and compatible) stores. Can be set to HTTP to disable TLS/SSL

		edge_properties: Option for enabling edge properties that allows RDF statements to appear as subjects of RDF statements (aka RDF*). 

		graph_aliases: Configuration option to enable or disable support for named graph aliases

		graphql_auto_schema: Enables automatic generation of the default GraphQL schema if one has not been created by the user.

		graphql_auto_schema_source: Specifies the input source to use for generating the default GraphQL schema automatically.

		graphql_data_graphs: Specifies which graphs will be queried by default via GraphQL queries. The default value (tag:stardog:api:context:local) is to query all local graphs (default or named). Use the special graph tag:stardog:api:context:all to query all local graphs plus the virtual graphs. Multiple graphs or graph aliases can be used as the option value.

		graphql_default_limit: The maximum number of top-level objects a GraphQL query can return. The argument "first" can be used within queries to limit results as well.

		graphql_result_memory_limit: The maximum number of heap memory a GraphQL result can use. GraphQL query results are created fully in memory before they are sent back to the client. This limit ensures query results will not use too much memory causing server to run out of memory. GraphQL queries are translated to SPARQL queries and the amount of memory the SPARQL query will use during execution is controlled by the query.memory.limit option.

		icv_active_graphs: Specifies which part of the database, in terms of named graphs, is checked with IC validation

		icv_consistency_automatic: Enables automatic ICV consistency check as part of transactions. Ensures that both reasoning consistencies and constraint violations are checked during ICV "Guard Mode" validation (with each commit). This is only effective when "icv.reasoning.enabled" is set to true.

		icv_enabled: Determines if all database mutations are subject to ICV. When enabled, each commit is inspected to ensure that the contents of the database are valid. Should a transaction attempt to commit invalid data, the commit will fail and the data will not be added/removed.

		icv_explanation_limit: The number of violations that will be computed and returned in the error message when guard mode is enabled. If the option is set to 0 no explanations will be computed and transaction failure will only indicate there was a violation without specifying which constraint failed.

		icv_reasoning_enabled: Determines if reasoning is used during ICV.

		index_bulk_load_sst_txlimit: The threshold of # of quads at which the bulk loading mechanism is used for transactional updates.

		index_differential_enable_limit: NOTE: Not used in Stardog v7+. The minimum number of statements in the Stardog database before differential indexes are used.

		index_differential_merge_limit: NOTE: Not used in Stardog v7+. The size in number of RDF statements before the differential indexes are merged to the main indexes.

		index_literals_canonical: Specify that non-string typed literals are canonicalized in the database. Improves query and loading performance, but does change literal values to a canonical form. For example, "1"^^xsd:byte is canonicalized to "1"^^xsd:integer. Set this option to false if you require literals to be exactly as specified, rather than canonicalized. The default value is 'true'. note that, this value can only be set at database creation time and cannot be changed at a future time.

		index_literals_limit: Prevents the literal index from growing above this size. When indexed properties store more literals, the system stops indexing them and the literal index is no longer used for query answering.

		index_literals_merge_limit: When the number of indexed literals added in transactions become greater than this, they will be added to the main index.

		index_literals_properties: Values of these properties will be put in a special literal index to support faster range queries. Provide a comma-separated property IRIs or the special IRI 'tag:stardog:api:property:all' to indicate all properties with supported value types should be indexed. The default value is 'tag:stardog:api:property:none' indicating literal index is disabled and no literal will be indexed.

		index_lucene_mmap: Enables memory-mapping in lucene indices (e.g., search, spatial).

		index_statistics_cache_capacity: The max capacity for the query pattern cardinality cache that is shared across queries to the same database.

		index_statistics_chains_enabled: If true, Stardog will pre-compute the number of times frequent binary chains occur in the data and will use that information for query optimization.Could be disabled for very large or very complex datasets. Changes to this option will take effect the next time statistics is recomputed.

		index_statistics_characteristic_limit: The max number of characteristic sets computed as a part of the statistical summary of the database. More diverse datasets may require a higher number for more accurate query planning. The downside is higher memory footprint and slower planning

		index_statistics_enable_active_graph: If true, Stardog will adjust the cardinality estimation for a query with based on the size of the active graph. Could be disabled for databases with few large named graphs with non-overlapping data.

		index_statistics_on_db_create: Determines whether and how selectivity statistics is computed when a database is bulk loaded. By default it's computed synchronously.

		index_statistics_predicate_threshold: If a certain predicate occurs in less than this share of all triples in the data, Stardog will not maintain extended statistics for that predicate.

		index_statistics_ranges_enabled: If true, Stardog will pre-compute the number of common objects for pairs of properties in the dataset. This information is used for query optimization.Could be disabled for very large or very complex datasets. Changes to this option will take effect the next time statistics is recomputed.

		index_statistics_sketch_capacity: The max number of objects that can be added to a sketch data structure before a new sketch is created

		index_statistics_update_automatic: Determines whether statistics are maintained automatically. When set to "true", Stardog will decide when to update statistics as the database is modified through additions and removals and update statistics as needed. If this option is set to "false", Stardog will never update the statistics regardless of how much the database is updated.

		index_statistics_update_blocking_ratio: Once the ratio of updated triples to database size goes over this limit statistics computation will be performed synchronously within the transaction instead of a background thread. Setting this option to a non-positive number (<= 0) will disable blocking updates.

		index_statistics_update_min_size: Minimum number of triples that should be in the database for statistics to be updated automatically

		index_statistics_update_ratio: Ratio of updated triples to the number of triples in the database that triggers the automatic statistics computation in a background thread

		index_writer_merge_limit: Maximum number of triples to keep in memory for merging interleaving additions and removals while querying uncommitted state

		ldap_role_mappings: A mapping from Stardog roles to LDAP groups

		ldap_superusers_group: The name of the group identifying Stardog super users

		ldap_user_class_filter: An LDAP user class filter

		ldap_user_dn_templates: A list of templates to form LDAP names from Stardog usernames

		ldap_user_name_attribute: A property of user DN to extract user name from (if specified, takes priority over DN template)

		literal_comparison_extended: Controls whether query evaluation will use extended literal comparison. If enabled, literals of different datatypes are first compared based on their string values and then based on the string value of their datatypes.

		literal_language_normalization: Configuration option for determining the normalization algorithm for the langauge tags of literals.

		local_iri_template_excludes: The set of IRI templates representing the form of IRIs which may NOT be present in the subject position of triples in the local database. Used when optimizing queries including both the local database and virtual graphs. IRI templates use the same placeholder syntax as mappings (eg, `{field}`) but the field names are ignored. Templates included here should be used to indicate which IRIs are guaranteed not to be present and should be updated when that changes.

		local_iri_template_includes: The set of IRI templates representing the form of IRIs which may be present in the subject position of triples in the local database. Used when optimizing queries including both the local database and virtual graphs. IRI templates use the same placeholder syntax as mappings (eg, `{field}`) but the field names are ignored. Templates included here should be used to indicate which IRIs may be present and should be updated when that changes.

		preserve_bnode_ids: Determines how the Stardog parser handles bnode (blank node) identifiers that may be present in RDF input. If this property is enabled, parsing and data loading performance are improved; but the other effect is that if distinct input files use (randomly or intentionally) the same bnode identifier, that bnode will point to one and the same node in the database. If you have input files that use explicit bnode identifiers, and more than one of those files may use the same bnode identifiers, and you don't want those bnodes to be smushed into a single node in the database, then this configuration option should be disabled.

		progress_monitor_enabled: When enabled, the progress of various tasks will be printed in the server log.

		query_all_graphs: This option controls the behavior for answering queries that don't specify a dataset (FROM or FROM NAMED) in the query. In such cases, the SPARQL specification says that the query should be answered only using the information in default graph (no context). However, sometimes it is desirable to answer such queries using all the information in the database including the default graph and all named graphs. Setting this option to true changes the behavior of Stardog to do this. Queries that specify a dataset are not affected by this option.

		query_describe_strategy: The default DESCRIBE query strategy for the database. Built-in strategies include "default", "cbd" and "bidirectional". See the docs for instructions to create your own describe strategy.

		query_dictionary_overflow_threshold: Configuration option for the max number of entries in the query-local dictionary before a persistent data structure is used (which can spill data to disk)

		query_inline_sqs: Option to control how stored queries should be evaluated inside the Stored Query Service (SQS). If stored queries referenced in SQS are inlined into the parent query some additional optimizations might become possible especially for stored queries involving virtual graphs. But inlined stored queries inherit the dataset of the parent query and might return different results compared to being executed in isolation. Some queries, e.g. stored queries that use path queries or correlation, cannot be inlined at all. The setting `optimizer` allows the optimizer to perform inlining when it is safe and improves query performance. Using the option `always` could cause some SQS executions fail.

		query_memory_exceeds_strategy: Configuration option for determining strategy for the query behaviour once memory limit reached

		query_memory_limit: Configuration option for determining the memory limit used by query

		query_plan_reuse: The conditions under which a cached plan will be reused. "ALWAYS" and "NEVER" determine query plan reuse as you would expect. "CARDINALITY" instructs Stardog to reuse cached query plans for structurally equivalent queries if the cardinality estimations of scans are similar.

		query_timeout: Determines max execution time for query evaluation. This can also be overridden in a query's parameters.  The following unit suffixes are available: "ms" for milliseconds, "s" for seconds, "m" for minutes, and "h" for hours.

		query_update_graph_diff: Configuration option for determining the update procedure that will be used for SPARQL update queries ADD, COPY and MOVE

		query_update_timeout: Determines max execution time for SPARQL update query evaluation. This can also be overridden in a query's parameters.  The following unit suffixes are available: "ms" for milliseconds, "s" for seconds, "m" for minutes, and "h" for hours.

		reasoning_approximate: Enables approximate reasoning. With this flag enabled Stardog will approximate an axiom that is outside the profile Stardog supports and normally ignored. For example, an equivalent class axiom might be split into two subclass axioms and only one subclass axiom is used.

		reasoning_classify_eager: Perform schema classification eagerly when the schema is loaded. Classifying eagerly ensures subclass and equivalence queries between named classes can be answered with a simple lookup. However, if the schema is changing frequently then this option can be turned off so classification is performed only if necessary.

		reasoning_consistency_automatic: Enables automatic consistency checking as part of every query performed with reasoning enabled. If the underlying database did not change since the last consistency check, the check will not be performed.

		reasoning_precompute_non_empty_predicates: If true, Stardog will pre-compute class and property names which have assertions in the data. That can speed-up reasoning but may slow things down when data changes often.

		reasoning_punning_enabled: Enables punning; the ability for an IRI to represent both a class and an individual.

		reasoning_rewriting: Allows one to choose how query patterns are rewritten for reasoning: as a whole (per scope) or individually (per pattern).

		reasoning_sameas: Option to enable owl:sameAs reasoning. When this option is set to "ON", then the reflexive, symmetric, and transitive closure of owl:sameAs triples in the database are computed. When it is set to "FULL", then owl:sameAs inferences are computed based on schema axioms, such as functional properties. See the docs for more information.

		reasoning_schema_graphs: Determines which, if any, named graph or graphs contains the schema (ontology, "TBox") part of the data. The legal value is a comma-separated list of named graph identifiers, including (optionally) the special names, tag:stardog:api:context:default and tag:stardog:api:context:local, which represent the default graph and the union of all local (non-virtual) named graphs and the default graph, respectively. In the context of database configurations only, Stardog will recognize default and * as short forms of those URIs, respectively.

		reasoning_schema_timeout: Timeout for schema reasoning. If schema reasoning cannot be completed in the specified time then only RDFS reasoning will be performed for the schema which might yield incomplete answers for the schema queries. The timeout values specified as test be a positive integer followed by either letter 'h' (for hours), letter 'm' (for minutes), letter 's' (for seconds), or letters 'ms' (for milliseconds). Examples: '1h' for 1 hour, '5m' for 5 minutes, '90s' for 90 seconds, '500ms' for 500 milliseconds.

		reasoning_schemas: Option to specify the schemas and the named graphs that constitute each schema. The value is a comma-separated collection of schema=IRI pairs. There should be one pair for each named graph in a schema. The graphs for the default schema are set via the reasoning.schema.graphs option.

		reasoning_schemas_memory_count: Option to specify the number of schemas to keep in memory. There can be more schemas defined in the database but only this many schemas will be kept in memory and other schemas will be pulled into memory as queries are getting answered. If this limit is too high, the amount of memory used for schemas will increase and might cause memory problems. If it is too low then answering reasoning queries might slow down.

		reasoning_type: Specifies the reasoning type associated with the database, most corresponding to the OWL Profiles of the same name. The following reasoning types are available: RDFS (OWL 2 axioms allowed in RDF Schema), QL (OWL 2 QL axioms), RL (OWL 2 RL axioms), EL (OWL 2 EL axioms), DL (OWL 2 DL axioms), SL (a combination of RDFS, QL, RL and EL axioms + user-defined rules) and NONE (disables reasoning). Any axiom outside the selected type will be ignored by the reasoner.

		reasoning_virtual_graph_enabled: Flag to enable reasoning over virtual graphs and SERVICE clauses.

		search_default_limit: Specify the default limit on the number of results returned from a full-text search (-1 returns all results). This only limits the number of results returned from the Lucene full-text index, not from its containing query.

		search_default_query_operator: Specify the Lucene operator (AND/OR) to use implicitly when searching

		search_enabled: Enables the full-text (unstructured) search index for the database; important for Semantic Search applications.

		search_index_compute_norm: Option to specify that value lengths (norms) should be computed and indexed. This is required for document length to influence scoring rank.

		search_index_contexts_excluded: Option to specify if the collection of contexts in named graphs is going to be leveraged as either excluded or included for literals to be indexed.

		search_index_contexts_filter: Option to specify the collection of contexts in named graphs to be excluded or included for literals to be indexed depending on SearchOptions.SEARCH_CONTEXTS_EXCLUDED option.

		search_index_datatypes: Option to specify the datatypes for which to index literals in Lucene. Literals with other datatypes will not be accessible via full-text search.

		search_index_properties_excluded: Option to specify the excluded properties for literals not to be indexed in Lucene. Literals with these properties cannot be evaluated for indexing.

		search_index_properties_included: Option to specify the only properties for literals to be indexed in Lucene. Please note that if search.index.properties.excluded option is set, this option will have no effect.

		search_index_state: 

		search_index_stopwords: Option to specify the list of the stopwords while indexing. The list of string is to be converted to a CharArraySet data structure of Lucene.

		search_index_token_filters: A sequence of token filter classes. Classes must be implementations of org.apache.lucene.analysis.TokenFilter. Filters will be applied in the order listed. Class names must be qualified by package unless existing in the `org.apache.lucene.analysis` package. The `StopFilter`, if specified, will used the value of the `search.index.stopwords` property.

		search_index_vacuum: This option controls how the full-text index is optimized as a part of database optimization. If set to true, Stardog will use the vacuuming technique to purge text literals which were previously been removed from the data also from the full-text index. The default value is false which means that the index will be rebuilt from scratch. This property is ignored in two cases: if search.optimize=true is explicitly supplied as an argument to 'db optimize' command, or if the index is in a dirty state i.e. it may lack some literals occurring in the data (this normally should not happen unless full-text index has not completed successfully).

		search_index_wordbreak_chars: A set of characters which are used to break words. Whitespace is also included

		search_page_size: Specify the page size used for iteration over results from the full-text index. A page is held in memory, so this count should NOT be large.

		search_reindex_cache_size: Option to specify the cache size of literals that is used for checking if a literal is indexed before.

		search_reindex_tx: Whether literals added during a transaction are automatically indexed. If this flag is set to 'false', then full-text search queries will return incomplete results until the index is rebuilt.

		search_wildcard_search_enabled: Enable support to query the Lucene full-text search index with leading wildcards.

		security_masking_function: SPARQL function to mask values of sensitive properties. There should be just one variable in there which will be replaced by actual sensitive nodes at query runtime.

		security_named_graphs: If enabled, named graphs are an explicit resource type in Stardog’s security model.

		security_properties_sensitive: Comma-separated set of property IRIs to which access is granted explicitly

		security_properties_sensitive_groups: Option to specify the sensitive property groups. The value is a collection of (group name, property IRI) pairs. A property that appears in at least one group is considered sensitive and requires explicit permission to be granted for read access. The  property IRIs in the default group should be defined with the option security.properties.sensitive.

		service_sparql_credentials_passthrough_regex: Specifies SPARQL endpoints for which SERVICE calls are allowed to pass through current credentials.

		service_sparql_result_limit: Limits the number of results generated by SERVICE calls to SPARQL endpoints. A negative value means no limit.

		shacl_shape_graphs: The set of named graphs from which to read the SHACL shapes for validation. Only the shapes that are defined within these names graphs will be validated. By default the shapes in all the local named graphs will be used.

		shacl_targetClass_simple: If true, sh:targetClass will be evaluated based on rdf:type triples only, without following rdfs:subClassOf relations.

		shacl_violation_limit_shape: Limits the number of violation per shape. The default value is -1. This option is introduced for ease of readability of the report on the types of different violations.

		spatial_distance_precision: Specifies the precision used for the distance calculations. The value is the number of significant digits distances used to represent distances. Smaller numbers sacrifice precision for performance. The default is 8. A value of -1 can be provided to compute distances to the maximum precision.

		spatial_enabled: Enables the geospatial search index for the database.

		spatial_error_percentage: A measure of acceptable error of the shape as a fraction. The value roughly corresponds to the fraction of a shape’s approximate radius. This setting does not affect points which are always indexed at the configured maximum precision as specified by spatial.precision but will affect other shapes. The default value is 0.025 (%2.5) and the valid values are between 0 and 0.5 (50%). Increasing this value will improve query performance as less levels are used but results will be less accurate.

		spatial_precision: Specifies the precision used for the indexing of geospatial data. The smaller the value, the less precision, but the better the performance of geospatial queries. The default value is 11 which yields sub-meter precision; a value of 8 will give a precision +/- 50m.

		spatial_result_limit: Specify the default limit on the number of results returned from a geospatial query (-1 returns all results). This only limits the number of results returned from the geospatial index, not from its containing query.

		spatial_result_page_size: Specify the page size used for iteration over results from the spatial index. A page is held in memory, so this count should NOT be large.

		spatial_use_jts: Use JTS (Java Topology Suite) to support more complex spatial structures such as polygons.

		sql_data_graphs: Specifies which graphs will be queried by default via SQL queries. The default value (tag:stardog:api:context:all) is to query all local graphs (default or named) plus any virtual graphs that might be defined. Setting this option to another value will mean any other graph will be ignored by the SQL queries. Use the special graph tag:stardog:api:context:local to query all local graphs but exclude virtual graphs. Multiple graphs or graph aliases can be used as the option value.

		sql_schema_auto: Enables automatic SQL schema generation when one does not exist in the database.

		sql_schema_auto_source: Specifies the input source to use for generating the SQL schema automatically when one does not exist in the database.

		sql_schema_graph: Specifies which named graph in the database is used to read SQL schema mapping.

		strict_parsing: Controls whether Stardog parses RDF strictly (true, the default) or loosely (false). Setting this to "false" will allow, for example, integer literals with leading zeros.

		transaction_commit_twophase: Enables two phase commit protocol for the cluster (this option has no effect for the single node server). When this option is enabled all the nodes in the cluster will prepare the transaction in the first phase of the commit. This ensures all nodes complete time-consuming operations and only after that the second phase of the commit will start where the coordinator will send the commit command to the other nodes. Once a node completes the commit operation the effects of the transaction will be visible in query results. With this option enabled the period of time where nodes might return different results to queries will be minimized. This option is most useful for long transactions (e.g., transactions that take several minutes or more) where the commit time for each node might differ in a noticeable way without the additional commit phase. For short transactions, enabling this option will not provide visible benefits (especially if transactions complete under a second) and the overhead of the additional commit phase will result in increased transaction times.

		transaction_isolation: Configures isolation level for transactions

		transaction_logging: Option for whether or not the database logs all transactions events to disk. The default when not in Cluster mode is "false", and when in Cluster mode the default is "true".

		transaction_logging_rotation_keep_backups: Determines whether we keep backups of the rotated log file

		transaction_logging_rotation_remove: Determines whether the current log file will be rotated or removed (i.e., truncated)

		transaction_logging_rotation_size: Determines the size (in bytes) at which the transaction log will be rotated

		transaction_logging_use_rotated: Enables using rotated transaction log

		transaction_write_conflict_strategy: Which conflict resolution strategy to use for this database. Write conflicts occur when two transactions attempt to modify the same statement inthe database simultaneously.

		virtual_transparency: Determines the default dataset the database evaluates queries against; if true, the named graphs portion of the dataset will default to local named graphs and accessible virtual graphs; if false (the default), the named graphs portion of the dataset will be limited to local named graphs only.

"""


	auto_schema_reasoning: Optional[bool] = Field(
		alias="auto.schema.reasoning",
		description="""Enables reasoning when automatically generating schemas from OWL. This setting will affect automatic schema generation for GraphQL (if graphql.auto.schema is enabled) and BI/SQL (if sql.schema.auto is enabled).""",
		default=None
	)
	database_archetypes: Optional[List[str]] = Field(
		alias="database.archetypes",
		description="""The name of one or more database archetypes, used to associate ontologies and constraints with new databases. See the docs for instructions to create your own archetype.""",
		default=None
	)
	database_bulk_load_stream_args: Optional[str] = Field(
		alias="database.bulk.load.stream.args",
		description="""Arguments to be passed to the stream factory for configuring the details of the stream instances that will be created. The value should be a ';' separated list of key value pairs separated by ':'. For example, 'subjects: 5; graphs: 3'.""",
		default=None
	)
	database_bulk_load_stream_factory: Optional[str] = Field(
		alias="database.bulk.load.stream.factory",
		description="""Fully qualified class name denoting an implementation of the RDFStreamFactory interface that will be used to load data into the newly created database. This option only takes effect at db creation time. The configuration of the RDFStream instances created is defined via the option database.bulk.load.stream.args.""",
		default=None
	)
	database_connection_timeout: Optional[duration] = Field(
		alias="database.connection.timeout",
		description="""The amount of time a connection to the database can be open, but inactive, before being automatically closed to reclaim the resources. The following unit suffixes are available: "ms" for milliseconds, "s" for seconds, "m" for minutes, and "h" for hours.""",
		default=None
	)
	database_ignore_bulk_load_errors: Optional[bool] = Field(
		alias="database.ignore.bulk.load.errors",
		description="""Option for whether or not to ignore errors encountered while loading data at db creation time. By default, these errors are ignored and db creation will continue with as much data as loaded.""",
		default=None
	)
	database_name: Optional[str] = Field(
		alias="database.name",
		description="""A database name, the legal value of which is given by the regular expression [A-Za-z]{1}[A-Za-z0-9_-]""",
		default=None
	)
	database_namespaces: Optional[List[str]] = Field(
		alias="database.namespaces",
		description="""The default namespaces for the database. Legal input is a comma-separated list of <prefix>=<namespace> values.""",
		default=None
	)
	database_online: Optional[bool] = Field(
		alias="database.online",
		description="""Whether or not the database is online""",
		default=None
	)
	database_type: Optional[str] = Field(
		alias="database.type",
		description="""Specifies the database as either user or system.""",
		default=None
	)
	docs_default_rdf_extractors: Optional[str] = Field(
		alias="docs.default.rdf.extractors",
		description="""Comma-separated list of names of RDF extractors to use when processing documents when no RDF extractor names are given. Built-in extractors include tika, text, entities, linked and dictionary. See the docs for instructions to create your own.""",
		default=None
	)
	docs_default_text_extractors: Optional[str] = Field(
		alias="docs.default.text.extractors",
		description="""Comma-separated list of names of text extractors to use when processing documents when no text extractor names are given. See the docs to create your own.""",
		default=None
	)
	docs_filesystem_uri: Optional[str] = Field(
		alias="docs.filesystem.uri",
		description="""A URI indicating which FileSystem provider to use for document storage. In addition to local storage (file:///), documents can be stored on Amazon S3 (s3:///) or document storage can be disabled altogether (none)""",
		default=None
	)
	docs_opennlp_models_path: Optional[str] = Field(
		alias="docs.opennlp.models.path",
		description="""The directory where OpenNLP models are located""",
		default=None
	)
	docs_path: Optional[str] = Field(
		alias="docs.path",
		description="""The path under which documents will be stored. A relative path is relative to the database directory. S3 storage should specify an absolute path with the bucket name as the first part of the path""",
		default=None
	)
	docs_s3_protocol: Optional[str] = Field(
		alias="docs.s3.protocol",
		description="""Protocol used when storing unstructured text documents on S3 (and compatible) stores. Can be set to HTTP to disable TLS/SSL""",
		default=None
	)
	edge_properties: Optional[bool] = Field(
		alias="edge.properties",
		description="""Option for enabling edge properties that allows RDF statements to appear as subjects of RDF statements (aka RDF*). """,
		default=None
	)
	graph_aliases: Optional[bool] = Field(
		alias="graph.aliases",
		description="""Configuration option to enable or disable support for named graph aliases""",
		default=None
	)
	graphql_auto_schema: Optional[bool] = Field(
		alias="graphql.auto.schema",
		description="""Enables automatic generation of the default GraphQL schema if one has not been created by the user.""",
		default=None
	)
	graphql_auto_schema_source: Optional[GraphqlAutoSchemaSource] = Field(
		alias="graphql.auto.schema.source",
		description="""Specifies the input source to use for generating the default GraphQL schema automatically.""",
		default=None
	)
	graphql_data_graphs: Optional[List[str]] = Field(
		alias="graphql.data.graphs",
		description="""Specifies which graphs will be queried by default via GraphQL queries. The default value (tag:stardog:api:context:local) is to query all local graphs (default or named). Use the special graph tag:stardog:api:context:all to query all local graphs plus the virtual graphs. Multiple graphs or graph aliases can be used as the option value.""",
		default=None
	)
	graphql_default_limit: Optional[int] = Field(
		alias="graphql.default.limit",
		description="""The maximum number of top-level objects a GraphQL query can return. The argument "first" can be used within queries to limit results as well.""",
		default=None
	)
	graphql_result_memory_limit: Optional[str] = Field(
		alias="graphql.result.memory.limit",
		description="""The maximum number of heap memory a GraphQL result can use. GraphQL query results are created fully in memory before they are sent back to the client. This limit ensures query results will not use too much memory causing server to run out of memory. GraphQL queries are translated to SPARQL queries and the amount of memory the SPARQL query will use during execution is controlled by the query.memory.limit option.""",
		default=None
	)
	icv_active_graphs: Optional[List[str]] = Field(
		alias="icv.active.graphs",
		description="""Specifies which part of the database, in terms of named graphs, is checked with IC validation""",
		default=None
	)
	icv_consistency_automatic: Optional[bool] = Field(
		alias="icv.consistency.automatic",
		description="""Enables automatic ICV consistency check as part of transactions. Ensures that both reasoning consistencies and constraint violations are checked during ICV "Guard Mode" validation (with each commit). This is only effective when "icv.reasoning.enabled" is set to true.""",
		default=None
	)
	icv_enabled: Optional[bool] = Field(
		alias="icv.enabled",
		description="""Determines if all database mutations are subject to ICV. When enabled, each commit is inspected to ensure that the contents of the database are valid. Should a transaction attempt to commit invalid data, the commit will fail and the data will not be added/removed.""",
		default=None
	)
	icv_explanation_limit: Optional[int] = Field(
		alias="icv.explanation.limit",
		description="""The number of violations that will be computed and returned in the error message when guard mode is enabled. If the option is set to 0 no explanations will be computed and transaction failure will only indicate there was a violation without specifying which constraint failed.""",
		default=None
	)
	icv_reasoning_enabled: Optional[bool] = Field(
		alias="icv.reasoning.enabled",
		description="""Determines if reasoning is used during ICV.""",
		default=None
	)
	index_bulk_load_sst_txlimit: Optional[int] = Field(
		alias="index.bulk.load.sst.txlimit",
		description="""The threshold of # of quads at which the bulk loading mechanism is used for transactional updates.""",
		default=None
	)
	index_differential_enable_limit: Optional[int] = Field(
		alias="index.differential.enable.limit",
		description="""NOTE: Not used in Stardog v7+. The minimum number of statements in the Stardog database before differential indexes are used.""",
		default=None
	)
	index_differential_merge_limit: Optional[int] = Field(
		alias="index.differential.merge.limit",
		description="""NOTE: Not used in Stardog v7+. The size in number of RDF statements before the differential indexes are merged to the main indexes.""",
		default=None
	)
	index_literals_canonical: Optional[bool] = Field(
		alias="index.literals.canonical",
		description="""Specify that non-string typed literals are canonicalized in the database. Improves query and loading performance, but does change literal values to a canonical form. For example, "1"^^xsd:byte is canonicalized to "1"^^xsd:integer. Set this option to false if you require literals to be exactly as specified, rather than canonicalized. The default value is 'true'. note that, this value can only be set at database creation time and cannot be changed at a future time.""",
		default=None
	)
	index_literals_limit: Optional[int] = Field(
		alias="index.literals.limit",
		description="""Prevents the literal index from growing above this size. When indexed properties store more literals, the system stops indexing them and the literal index is no longer used for query answering.""",
		default=None
	)
	index_literals_merge_limit: Optional[int] = Field(
		alias="index.literals.merge.limit",
		description="""When the number of indexed literals added in transactions become greater than this, they will be added to the main index.""",
		default=None
	)
	index_literals_properties: Optional[List[str]] = Field(
		alias="index.literals.properties",
		description="""Values of these properties will be put in a special literal index to support faster range queries. Provide a comma-separated property IRIs or the special IRI 'tag:stardog:api:property:all' to indicate all properties with supported value types should be indexed. The default value is 'tag:stardog:api:property:none' indicating literal index is disabled and no literal will be indexed.""",
		default=None
	)
	index_lucene_mmap: Optional[bool] = Field(
		alias="index.lucene.mmap",
		description="""Enables memory-mapping in lucene indices (e.g., search, spatial).""",
		default=None
	)
	index_statistics_cache_capacity: Optional[int] = Field(
		alias="index.statistics.cache.capacity",
		description="""The max capacity for the query pattern cardinality cache that is shared across queries to the same database.""",
		default=None
	)
	index_statistics_chains_enabled: Optional[bool] = Field(
		alias="index.statistics.chains.enabled",
		description="""If true, Stardog will pre-compute the number of times frequent binary chains occur in the data and will use that information for query optimization.Could be disabled for very large or very complex datasets. Changes to this option will take effect the next time statistics is recomputed.""",
		default=None
	)
	index_statistics_characteristic_limit: Optional[int] = Field(
		alias="index.statistics.characteristic.limit",
		description="""The max number of characteristic sets computed as a part of the statistical summary of the database. More diverse datasets may require a higher number for more accurate query planning. The downside is higher memory footprint and slower planning""",
		default=None
	)
	index_statistics_enable_active_graph: Optional[bool] = Field(
		alias="index.statistics.enable_active_graph",
		description="""If true, Stardog will adjust the cardinality estimation for a query with based on the size of the active graph. Could be disabled for databases with few large named graphs with non-overlapping data.""",
		default=None
	)
	index_statistics_on_db_create: Optional[IndexStatisticsOnDbCreate] = Field(
		alias="index.statistics.on_db_create",
		description="""Determines whether and how selectivity statistics is computed when a database is bulk loaded. By default it's computed synchronously.""",
		default=None
	)
	index_statistics_predicate_threshold: Optional[float] = Field(
		alias="index.statistics.predicate.threshold",
		description="""If a certain predicate occurs in less than this share of all triples in the data, Stardog will not maintain extended statistics for that predicate.""",
		default=None
	)
	index_statistics_ranges_enabled: Optional[bool] = Field(
		alias="index.statistics.ranges.enabled",
		description="""If true, Stardog will pre-compute the number of common objects for pairs of properties in the dataset. This information is used for query optimization.Could be disabled for very large or very complex datasets. Changes to this option will take effect the next time statistics is recomputed.""",
		default=None
	)
	index_statistics_sketch_capacity: Optional[int] = Field(
		alias="index.statistics.sketch.capacity",
		description="""The max number of objects that can be added to a sketch data structure before a new sketch is created""",
		default=None
	)
	index_statistics_update_automatic: Optional[bool] = Field(
		alias="index.statistics.update.automatic",
		description="""Determines whether statistics are maintained automatically. When set to "true", Stardog will decide when to update statistics as the database is modified through additions and removals and update statistics as needed. If this option is set to "false", Stardog will never update the statistics regardless of how much the database is updated.""",
		default=None
	)
	index_statistics_update_blocking_ratio: Optional[float] = Field(
		alias="index.statistics.update.blocking.ratio",
		description="""Once the ratio of updated triples to database size goes over this limit statistics computation will be performed synchronously within the transaction instead of a background thread. Setting this option to a non-positive number (<= 0) will disable blocking updates.""",
		default=None
	)
	index_statistics_update_min_size: Optional[int] = Field(
		alias="index.statistics.update.min.size",
		description="""Minimum number of triples that should be in the database for statistics to be updated automatically""",
		default=None
	)
	index_statistics_update_ratio: Optional[float] = Field(
		alias="index.statistics.update.ratio",
		description="""Ratio of updated triples to the number of triples in the database that triggers the automatic statistics computation in a background thread""",
		default=None
	)
	index_writer_merge_limit: Optional[int] = Field(
		alias="index.writer.merge.limit",
		description="""Maximum number of triples to keep in memory for merging interleaving additions and removals while querying uncommitted state""",
		default=None
	)
	ldap_role_mappings: Optional[str] = Field(
		alias="ldap.role.mappings",
		description="""A mapping from Stardog roles to LDAP groups""",
		default=None
	)
	ldap_superusers_group: Optional[str] = Field(
		alias="ldap.superusers.group",
		description="""The name of the group identifying Stardog super users""",
		default=None
	)
	ldap_user_class_filter: Optional[str] = Field(
		alias="ldap.user.class.filter",
		description="""An LDAP user class filter""",
		default=None
	)
	ldap_user_dn_templates: Optional[str] = Field(
		alias="ldap.user.dn.templates",
		description="""A list of templates to form LDAP names from Stardog usernames""",
		default=None
	)
	ldap_user_name_attribute: Optional[str] = Field(
		alias="ldap.user.name.attribute",
		description="""A property of user DN to extract user name from (if specified, takes priority over DN template)""",
		default=None
	)
	literal_comparison_extended: Optional[bool] = Field(
		alias="literal.comparison.extended",
		description="""Controls whether query evaluation will use extended literal comparison. If enabled, literals of different datatypes are first compared based on their string values and then based on the string value of their datatypes.""",
		default=None
	)
	literal_language_normalization: Optional[LiteralLanguageNormalization] = Field(
		alias="literal.language.normalization",
		description="""Configuration option for determining the normalization algorithm for the langauge tags of literals.""",
		default=None
	)
	local_iri_template_excludes: Optional[List[str]] = Field(
		alias="local.iri.template.excludes",
		description="""The set of IRI templates representing the form of IRIs which may NOT be present in the subject position of triples in the local database. Used when optimizing queries including both the local database and virtual graphs. IRI templates use the same placeholder syntax as mappings (eg, `{field}`) but the field names are ignored. Templates included here should be used to indicate which IRIs are guaranteed not to be present and should be updated when that changes.""",
		default=None
	)
	local_iri_template_includes: Optional[List[str]] = Field(
		alias="local.iri.template.includes",
		description="""The set of IRI templates representing the form of IRIs which may be present in the subject position of triples in the local database. Used when optimizing queries including both the local database and virtual graphs. IRI templates use the same placeholder syntax as mappings (eg, `{field}`) but the field names are ignored. Templates included here should be used to indicate which IRIs may be present and should be updated when that changes.""",
		default=None
	)
	preserve_bnode_ids: Optional[bool] = Field(
		alias="preserve.bnode.ids",
		description="""Determines how the Stardog parser handles bnode (blank node) identifiers that may be present in RDF input. If this property is enabled, parsing and data loading performance are improved; but the other effect is that if distinct input files use (randomly or intentionally) the same bnode identifier, that bnode will point to one and the same node in the database. If you have input files that use explicit bnode identifiers, and more than one of those files may use the same bnode identifiers, and you don't want those bnodes to be smushed into a single node in the database, then this configuration option should be disabled.""",
		default=None
	)
	progress_monitor_enabled: Optional[bool] = Field(
		alias="progress.monitor.enabled",
		description="""When enabled, the progress of various tasks will be printed in the server log.""",
		default=None
	)
	query_all_graphs: Optional[bool] = Field(
		alias="query.all.graphs",
		description="""This option controls the behavior for answering queries that don't specify a dataset (FROM or FROM NAMED) in the query. In such cases, the SPARQL specification says that the query should be answered only using the information in default graph (no context). However, sometimes it is desirable to answer such queries using all the information in the database including the default graph and all named graphs. Setting this option to true changes the behavior of Stardog to do this. Queries that specify a dataset are not affected by this option.""",
		default=None
	)
	query_describe_strategy: Optional[str] = Field(
		alias="query.describe.strategy",
		description="""The default DESCRIBE query strategy for the database. Built-in strategies include "default", "cbd" and "bidirectional". See the docs for instructions to create your own describe strategy.""",
		default=None
	)
	query_dictionary_overflow_threshold: Optional[int] = Field(
		alias="query.dictionary.overflow.threshold",
		description="""Configuration option for the max number of entries in the query-local dictionary before a persistent data structure is used (which can spill data to disk)""",
		default=None
	)
	query_inline_sqs: Optional[QueryInlineSqs] = Field(
		alias="query.inline.sqs",
		description="""Option to control how stored queries should be evaluated inside the Stored Query Service (SQS). If stored queries referenced in SQS are inlined into the parent query some additional optimizations might become possible especially for stored queries involving virtual graphs. But inlined stored queries inherit the dataset of the parent query and might return different results compared to being executed in isolation. Some queries, e.g. stored queries that use path queries or correlation, cannot be inlined at all. The setting `optimizer` allows the optimizer to perform inlining when it is safe and improves query performance. Using the option `always` could cause some SQS executions fail.""",
		default=None
	)
	query_memory_exceeds_strategy: Optional[QueryMemoryExceedsStrategy] = Field(
		alias="query.memory.exceeds.strategy",
		description="""Configuration option for determining strategy for the query behaviour once memory limit reached""",
		default=None
	)
	query_memory_limit: Optional[str] = Field(
		alias="query.memory.limit",
		description="""Configuration option for determining the memory limit used by query""",
		default=None
	)
	query_plan_reuse: Optional[QueryPlanReuse] = Field(
		alias="query.plan.reuse",
		description="""The conditions under which a cached plan will be reused. "ALWAYS" and "NEVER" determine query plan reuse as you would expect. "CARDINALITY" instructs Stardog to reuse cached query plans for structurally equivalent queries if the cardinality estimations of scans are similar.""",
		default=None
	)
	query_timeout: Optional[duration] = Field(
		alias="query.timeout",
		description="""Determines max execution time for query evaluation. This can also be overridden in a query's parameters.  The following unit suffixes are available: "ms" for milliseconds, "s" for seconds, "m" for minutes, and "h" for hours.""",
		default=None
	)
	query_update_graph_diff: Optional[bool] = Field(
		alias="query.update.graph.diff",
		description="""Configuration option for determining the update procedure that will be used for SPARQL update queries ADD, COPY and MOVE""",
		default=None
	)
	query_update_timeout: Optional[duration] = Field(
		alias="query.update.timeout",
		description="""Determines max execution time for SPARQL update query evaluation. This can also be overridden in a query's parameters.  The following unit suffixes are available: "ms" for milliseconds, "s" for seconds, "m" for minutes, and "h" for hours.""",
		default=None
	)
	reasoning_approximate: Optional[bool] = Field(
		alias="reasoning.approximate",
		description="""Enables approximate reasoning. With this flag enabled Stardog will approximate an axiom that is outside the profile Stardog supports and normally ignored. For example, an equivalent class axiom might be split into two subclass axioms and only one subclass axiom is used.""",
		default=None
	)
	reasoning_classify_eager: Optional[bool] = Field(
		alias="reasoning.classify.eager",
		description="""Perform schema classification eagerly when the schema is loaded. Classifying eagerly ensures subclass and equivalence queries between named classes can be answered with a simple lookup. However, if the schema is changing frequently then this option can be turned off so classification is performed only if necessary.""",
		default=None
	)
	reasoning_consistency_automatic: Optional[bool] = Field(
		alias="reasoning.consistency.automatic",
		description="""Enables automatic consistency checking as part of every query performed with reasoning enabled. If the underlying database did not change since the last consistency check, the check will not be performed.""",
		default=None
	)
	reasoning_precompute_non_empty_predicates: Optional[bool] = Field(
		alias="reasoning.precompute.non_empty.predicates",
		description="""If true, Stardog will pre-compute class and property names which have assertions in the data. That can speed-up reasoning but may slow things down when data changes often.""",
		default=None
	)
	reasoning_punning_enabled: Optional[bool] = Field(
		alias="reasoning.punning.enabled",
		description="""Enables punning; the ability for an IRI to represent both a class and an individual.""",
		default=None
	)
	reasoning_rewriting: Optional[ReasoningRewriting] = Field(
		alias="reasoning.rewriting",
		description="""Allows one to choose how query patterns are rewritten for reasoning: as a whole (per scope) or individually (per pattern).""",
		default=None
	)
	reasoning_sameas: Optional[ReasoningSameas] = Field(
		alias="reasoning.sameas",
		description="""Option to enable owl:sameAs reasoning. When this option is set to "ON", then the reflexive, symmetric, and transitive closure of owl:sameAs triples in the database are computed. When it is set to "FULL", then owl:sameAs inferences are computed based on schema axioms, such as functional properties. See the docs for more information.""",
		default=None
	)
	reasoning_schema_graphs: Optional[List[str]] = Field(
		alias="reasoning.schema.graphs",
		description="""Determines which, if any, named graph or graphs contains the schema (ontology, "TBox") part of the data. The legal value is a comma-separated list of named graph identifiers, including (optionally) the special names, tag:stardog:api:context:default and tag:stardog:api:context:local, which represent the default graph and the union of all local (non-virtual) named graphs and the default graph, respectively. In the context of database configurations only, Stardog will recognize default and * as short forms of those URIs, respectively.""",
		default=None
	)
	reasoning_schema_timeout: Optional[duration] = Field(
		alias="reasoning.schema.timeout",
		description="""Timeout for schema reasoning. If schema reasoning cannot be completed in the specified time then only RDFS reasoning will be performed for the schema which might yield incomplete answers for the schema queries. The timeout values specified as test be a positive integer followed by either letter 'h' (for hours), letter 'm' (for minutes), letter 's' (for seconds), or letters 'ms' (for milliseconds). Examples: '1h' for 1 hour, '5m' for 5 minutes, '90s' for 90 seconds, '500ms' for 500 milliseconds.""",
		default=None
	)
	reasoning_schemas: Optional[List[str]] = Field(
		alias="reasoning.schemas",
		description="""Option to specify the schemas and the named graphs that constitute each schema. The value is a comma-separated collection of schema=IRI pairs. There should be one pair for each named graph in a schema. The graphs for the default schema are set via the reasoning.schema.graphs option.""",
		default=None
	)
	reasoning_schemas_memory_count: Optional[int] = Field(
		alias="reasoning.schemas.memory.count",
		description="""Option to specify the number of schemas to keep in memory. There can be more schemas defined in the database but only this many schemas will be kept in memory and other schemas will be pulled into memory as queries are getting answered. If this limit is too high, the amount of memory used for schemas will increase and might cause memory problems. If it is too low then answering reasoning queries might slow down.""",
		default=None
	)
	reasoning_type: Optional[ReasoningType] = Field(
		alias="reasoning.type",
		description="""Specifies the reasoning type associated with the database, most corresponding to the OWL Profiles of the same name. The following reasoning types are available: RDFS (OWL 2 axioms allowed in RDF Schema), QL (OWL 2 QL axioms), RL (OWL 2 RL axioms), EL (OWL 2 EL axioms), DL (OWL 2 DL axioms), SL (a combination of RDFS, QL, RL and EL axioms + user-defined rules) and NONE (disables reasoning). Any axiom outside the selected type will be ignored by the reasoner.""",
		default=None
	)
	reasoning_virtual_graph_enabled: Optional[bool] = Field(
		alias="reasoning.virtual.graph.enabled",
		description="""Flag to enable reasoning over virtual graphs and SERVICE clauses.""",
		default=None
	)
	search_default_limit: Optional[int] = Field(
		alias="search.default.limit",
		description="""Specify the default limit on the number of results returned from a full-text search (-1 returns all results). This only limits the number of results returned from the Lucene full-text index, not from its containing query.""",
		default=None
	)
	search_default_query_operator: Optional[SearchDefaultQueryOperator] = Field(
		alias="search.default.query.operator",
		description="""Specify the Lucene operator (AND/OR) to use implicitly when searching""",
		default=None
	)
	search_enabled: Optional[bool] = Field(
		alias="search.enabled",
		description="""Enables the full-text (unstructured) search index for the database; important for Semantic Search applications.""",
		default=None
	)
	search_index_compute_norm: Optional[bool] = Field(
		alias="search.index.compute.norm",
		description="""Option to specify that value lengths (norms) should be computed and indexed. This is required for document length to influence scoring rank.""",
		default=None
	)
	search_index_contexts_excluded: Optional[bool] = Field(
		alias="search.index.contexts.excluded",
		description="""Option to specify if the collection of contexts in named graphs is going to be leveraged as either excluded or included for literals to be indexed.""",
		default=None
	)
	search_index_contexts_filter: Optional[List[str]] = Field(
		alias="search.index.contexts.filter",
		description="""Option to specify the collection of contexts in named graphs to be excluded or included for literals to be indexed depending on SearchOptions.SEARCH_CONTEXTS_EXCLUDED option.""",
		default=None
	)
	search_index_datatypes: Optional[List[str]] = Field(
		alias="search.index.datatypes",
		description="""Option to specify the datatypes for which to index literals in Lucene. Literals with other datatypes will not be accessible via full-text search.""",
		default=None
	)
	search_index_properties_excluded: Optional[List[str]] = Field(
		alias="search.index.properties.excluded",
		description="""Option to specify the excluded properties for literals not to be indexed in Lucene. Literals with these properties cannot be evaluated for indexing.""",
		default=None
	)
	search_index_properties_included: Optional[List[str]] = Field(
		alias="search.index.properties.included",
		description="""Option to specify the only properties for literals to be indexed in Lucene. Please note that if search.index.properties.excluded option is set, this option will have no effect.""",
		default=None
	)
	search_index_state: Optional[SearchIndexState] = Field(
		alias="search.index.state",
		description="""""",
		default=None
	)
	search_index_stopwords: Optional[List[str]] = Field(
		alias="search.index.stopwords",
		description="""Option to specify the list of the stopwords while indexing. The list of string is to be converted to a CharArraySet data structure of Lucene.""",
		default=None
	)
	search_index_token_filters: Optional[List[str]] = Field(
		alias="search.index.token.filters",
		description="""A sequence of token filter classes. Classes must be implementations of org.apache.lucene.analysis.TokenFilter. Filters will be applied in the order listed. Class names must be qualified by package unless existing in the `org.apache.lucene.analysis` package. The `StopFilter`, if specified, will used the value of the `search.index.stopwords` property.""",
		default=None
	)
	search_index_vacuum: Optional[bool] = Field(
		alias="search.index.vacuum",
		description="""This option controls how the full-text index is optimized as a part of database optimization. If set to true, Stardog will use the vacuuming technique to purge text literals which were previously been removed from the data also from the full-text index. The default value is false which means that the index will be rebuilt from scratch. This property is ignored in two cases: if search.optimize=true is explicitly supplied as an argument to 'db optimize' command, or if the index is in a dirty state i.e. it may lack some literals occurring in the data (this normally should not happen unless full-text index has not completed successfully).""",
		default=None
	)
	search_index_wordbreak_chars: Optional[str] = Field(
		alias="search.index.wordbreak.chars",
		description="""A set of characters which are used to break words. Whitespace is also included""",
		default=None
	)
	search_page_size: Optional[int] = Field(
		alias="search.page.size",
		description="""Specify the page size used for iteration over results from the full-text index. A page is held in memory, so this count should NOT be large.""",
		default=None
	)
	search_reindex_cache_size: Optional[int] = Field(
		alias="search.reindex.cache.size",
		description="""Option to specify the cache size of literals that is used for checking if a literal is indexed before.""",
		default=None
	)
	search_reindex_tx: Optional[bool] = Field(
		alias="search.reindex.tx",
		description="""Whether literals added during a transaction are automatically indexed. If this flag is set to 'false', then full-text search queries will return incomplete results until the index is rebuilt.""",
		default=None
	)
	search_wildcard_search_enabled: Optional[bool] = Field(
		alias="search.wildcard.search.enabled",
		description="""Enable support to query the Lucene full-text search index with leading wildcards.""",
		default=None
	)
	security_masking_function: Optional[str] = Field(
		alias="security.masking.function",
		description="""SPARQL function to mask values of sensitive properties. There should be just one variable in there which will be replaced by actual sensitive nodes at query runtime.""",
		default=None
	)
	security_named_graphs: Optional[bool] = Field(
		alias="security.named.graphs",
		description="""If enabled, named graphs are an explicit resource type in Stardog’s security model.""",
		default=None
	)
	security_properties_sensitive: Optional[List[str]] = Field(
		alias="security.properties.sensitive",
		description="""Comma-separated set of property IRIs to which access is granted explicitly""",
		default=None
	)
	security_properties_sensitive_groups: Optional[List[sensitive_property_group]] = Field(
		alias="security.properties.sensitive.groups",
		description="""Option to specify the sensitive property groups. The value is a collection of (group name, property IRI) pairs. A property that appears in at least one group is considered sensitive and requires explicit permission to be granted for read access. The  property IRIs in the default group should be defined with the option security.properties.sensitive.""",
		default=None
	)
	service_sparql_credentials_passthrough_regex: Optional[str] = Field(
		alias="service.sparql.credentials.passthrough.regex",
		description="""Specifies SPARQL endpoints for which SERVICE calls are allowed to pass through current credentials.""",
		default=None
	)
	service_sparql_result_limit: Optional[int] = Field(
		alias="service.sparql.result.limit",
		description="""Limits the number of results generated by SERVICE calls to SPARQL endpoints. A negative value means no limit.""",
		default=None
	)
	shacl_shape_graphs: Optional[List[str]] = Field(
		alias="shacl.shape.graphs",
		description="""The set of named graphs from which to read the SHACL shapes for validation. Only the shapes that are defined within these names graphs will be validated. By default the shapes in all the local named graphs will be used.""",
		default=None
	)
	shacl_targetClass_simple: Optional[bool] = Field(
		alias="shacl.targetClass.simple",
		description="""If true, sh:targetClass will be evaluated based on rdf:type triples only, without following rdfs:subClassOf relations.""",
		default=None
	)
	shacl_violation_limit_shape: Optional[int] = Field(
		alias="shacl.violation.limit.shape",
		description="""Limits the number of violation per shape. The default value is -1. This option is introduced for ease of readability of the report on the types of different violations.""",
		default=None
	)
	spatial_distance_precision: Optional[int] = Field(
		alias="spatial.distance.precision",
		description="""Specifies the precision used for the distance calculations. The value is the number of significant digits distances used to represent distances. Smaller numbers sacrifice precision for performance. The default is 8. A value of -1 can be provided to compute distances to the maximum precision.""",
		default=None
	)
	spatial_enabled: Optional[bool] = Field(
		alias="spatial.enabled",
		description="""Enables the geospatial search index for the database.""",
		default=None
	)
	spatial_error_percentage: Optional[float] = Field(
		alias="spatial.error.percentage",
		description="""A measure of acceptable error of the shape as a fraction. The value roughly corresponds to the fraction of a shape’s approximate radius. This setting does not affect points which are always indexed at the configured maximum precision as specified by spatial.precision but will affect other shapes. The default value is 0.025 (%2.5) and the valid values are between 0 and 0.5 (50%). Increasing this value will improve query performance as less levels are used but results will be less accurate.""",
		default=None
	)
	spatial_precision: Optional[int] = Field(
		alias="spatial.precision",
		description="""Specifies the precision used for the indexing of geospatial data. The smaller the value, the less precision, but the better the performance of geospatial queries. The default value is 11 which yields sub-meter precision; a value of 8 will give a precision +/- 50m.""",
		default=None
	)
	spatial_result_limit: Optional[int] = Field(
		alias="spatial.result.limit",
		description="""Specify the default limit on the number of results returned from a geospatial query (-1 returns all results). This only limits the number of results returned from the geospatial index, not from its containing query.""",
		default=None
	)
	spatial_result_page_size: Optional[int] = Field(
		alias="spatial.result.page_size",
		description="""Specify the page size used for iteration over results from the spatial index. A page is held in memory, so this count should NOT be large.""",
		default=None
	)
	spatial_use_jts: Optional[bool] = Field(
		alias="spatial.use.jts",
		description="""Use JTS (Java Topology Suite) to support more complex spatial structures such as polygons.""",
		default=None
	)
	sql_data_graphs: Optional[List[str]] = Field(
		alias="sql.data.graphs",
		description="""Specifies which graphs will be queried by default via SQL queries. The default value (tag:stardog:api:context:all) is to query all local graphs (default or named) plus any virtual graphs that might be defined. Setting this option to another value will mean any other graph will be ignored by the SQL queries. Use the special graph tag:stardog:api:context:local to query all local graphs but exclude virtual graphs. Multiple graphs or graph aliases can be used as the option value.""",
		default=None
	)
	sql_schema_auto: Optional[bool] = Field(
		alias="sql.schema.auto",
		description="""Enables automatic SQL schema generation when one does not exist in the database.""",
		default=None
	)
	sql_schema_auto_source: Optional[SqlSchemaAutoSource] = Field(
		alias="sql.schema.auto.source",
		description="""Specifies the input source to use for generating the SQL schema automatically when one does not exist in the database.""",
		default=None
	)
	sql_schema_graph: Optional[str] = Field(
		alias="sql.schema.graph",
		description="""Specifies which named graph in the database is used to read SQL schema mapping.""",
		default=None
	)
	strict_parsing: Optional[bool] = Field(
		alias="strict.parsing",
		description="""Controls whether Stardog parses RDF strictly (true, the default) or loosely (false). Setting this to "false" will allow, for example, integer literals with leading zeros.""",
		default=None
	)
	transaction_commit_twophase: Optional[bool] = Field(
		alias="transaction.commit.twophase",
		description="""Enables two phase commit protocol for the cluster (this option has no effect for the single node server). When this option is enabled all the nodes in the cluster will prepare the transaction in the first phase of the commit. This ensures all nodes complete time-consuming operations and only after that the second phase of the commit will start where the coordinator will send the commit command to the other nodes. Once a node completes the commit operation the effects of the transaction will be visible in query results. With this option enabled the period of time where nodes might return different results to queries will be minimized. This option is most useful for long transactions (e.g., transactions that take several minutes or more) where the commit time for each node might differ in a noticeable way without the additional commit phase. For short transactions, enabling this option will not provide visible benefits (especially if transactions complete under a second) and the overhead of the additional commit phase will result in increased transaction times.""",
		default=None
	)
	transaction_isolation: Optional[TransactionIsolation] = Field(
		alias="transaction.isolation",
		description="""Configures isolation level for transactions""",
		default=None
	)
	transaction_logging: Optional[bool] = Field(
		alias="transaction.logging",
		description="""Option for whether or not the database logs all transactions events to disk. The default when not in Cluster mode is "false", and when in Cluster mode the default is "true".""",
		default=None
	)
	transaction_logging_rotation_keep_backups: Optional[bool] = Field(
		alias="transaction.logging.rotation.keep_backups",
		description="""Determines whether we keep backups of the rotated log file""",
		default=None
	)
	transaction_logging_rotation_remove: Optional[bool] = Field(
		alias="transaction.logging.rotation.remove",
		description="""Determines whether the current log file will be rotated or removed (i.e., truncated)""",
		default=None
	)
	transaction_logging_rotation_size: Optional[int] = Field(
		alias="transaction.logging.rotation.size",
		description="""Determines the size (in bytes) at which the transaction log will be rotated""",
		default=None
	)
	transaction_logging_use_rotated: Optional[bool] = Field(
		alias="transaction.logging.use.rotated",
		description="""Enables using rotated transaction log""",
		default=None
	)
	transaction_write_conflict_strategy: Optional[TransactionWriteConflictStrategy] = Field(
		alias="transaction.write.conflict.strategy",
		description="""Which conflict resolution strategy to use for this database. Write conflicts occur when two transactions attempt to modify the same statement inthe database simultaneously.""",
		default=None
	)
	virtual_transparency: Optional[bool] = Field(
		alias="virtual.transparency",
		description="""Determines the default dataset the database evaluates queries against; if true, the named graphs portion of the dataset will default to local named graphs and accessible virtual graphs; if false (the default), the named graphs portion of the dataset will be limited to local named graphs only.""",
		default=None
	)

	@classmethod
	def get_options(cls):
		return list(cls.schema(True).get("properties").keys())


	class Config:
		extra = Extra.forbid
		allow_population_by_field_name = True


class OfflineDatabaseOptions(BaseModel):
	"""Options that can be modified when database is offline

		auto_schema_reasoning: Enables reasoning when automatically generating schemas from OWL. This setting will affect automatic schema generation for GraphQL (if graphql.auto.schema is enabled) and BI/SQL (if sql.schema.auto is enabled).

		database_archetypes: The name of one or more database archetypes, used to associate ontologies and constraints with new databases. See the docs for instructions to create your own archetype.

		database_connection_timeout: The amount of time a connection to the database can be open, but inactive, before being automatically closed to reclaim the resources. The following unit suffixes are available: "ms" for milliseconds, "s" for seconds, "m" for minutes, and "h" for hours.

		database_namespaces: The default namespaces for the database. Legal input is a comma-separated list of <prefix>=<namespace> values.

		docs_default_rdf_extractors: Comma-separated list of names of RDF extractors to use when processing documents when no RDF extractor names are given. Built-in extractors include tika, text, entities, linked and dictionary. See the docs for instructions to create your own.

		docs_default_text_extractors: Comma-separated list of names of text extractors to use when processing documents when no text extractor names are given. See the docs to create your own.

		docs_filesystem_uri: A URI indicating which FileSystem provider to use for document storage. In addition to local storage (file:///), documents can be stored on Amazon S3 (s3:///) or document storage can be disabled altogether (none)

		docs_opennlp_models_path: The directory where OpenNLP models are located

		docs_path: The path under which documents will be stored. A relative path is relative to the database directory. S3 storage should specify an absolute path with the bucket name as the first part of the path

		docs_s3_protocol: Protocol used when storing unstructured text documents on S3 (and compatible) stores. Can be set to HTTP to disable TLS/SSL

		graph_aliases: Configuration option to enable or disable support for named graph aliases

		graphql_auto_schema: Enables automatic generation of the default GraphQL schema if one has not been created by the user.

		graphql_auto_schema_source: Specifies the input source to use for generating the default GraphQL schema automatically.

		graphql_data_graphs: Specifies which graphs will be queried by default via GraphQL queries. The default value (tag:stardog:api:context:local) is to query all local graphs (default or named). Use the special graph tag:stardog:api:context:all to query all local graphs plus the virtual graphs. Multiple graphs or graph aliases can be used as the option value.

		graphql_default_limit: The maximum number of top-level objects a GraphQL query can return. The argument "first" can be used within queries to limit results as well.

		graphql_result_memory_limit: The maximum number of heap memory a GraphQL result can use. GraphQL query results are created fully in memory before they are sent back to the client. This limit ensures query results will not use too much memory causing server to run out of memory. GraphQL queries are translated to SPARQL queries and the amount of memory the SPARQL query will use during execution is controlled by the query.memory.limit option.

		icv_consistency_automatic: Enables automatic ICV consistency check as part of transactions. Ensures that both reasoning consistencies and constraint violations are checked during ICV "Guard Mode" validation (with each commit). This is only effective when "icv.reasoning.enabled" is set to true.

		icv_enabled: Determines if all database mutations are subject to ICV. When enabled, each commit is inspected to ensure that the contents of the database are valid. Should a transaction attempt to commit invalid data, the commit will fail and the data will not be added/removed.

		icv_explanation_limit: The number of violations that will be computed and returned in the error message when guard mode is enabled. If the option is set to 0 no explanations will be computed and transaction failure will only indicate there was a violation without specifying which constraint failed.

		icv_reasoning_enabled: Determines if reasoning is used during ICV.

		index_bulk_load_sst_txlimit: The threshold of # of quads at which the bulk loading mechanism is used for transactional updates.

		index_differential_enable_limit: NOTE: Not used in Stardog v7+. The minimum number of statements in the Stardog database before differential indexes are used.

		index_differential_merge_limit: NOTE: Not used in Stardog v7+. The size in number of RDF statements before the differential indexes are merged to the main indexes.

		index_literals_limit: Prevents the literal index from growing above this size. When indexed properties store more literals, the system stops indexing them and the literal index is no longer used for query answering.

		index_literals_merge_limit: When the number of indexed literals added in transactions become greater than this, they will be added to the main index.

		index_literals_properties: Values of these properties will be put in a special literal index to support faster range queries. Provide a comma-separated property IRIs or the special IRI 'tag:stardog:api:property:all' to indicate all properties with supported value types should be indexed. The default value is 'tag:stardog:api:property:none' indicating literal index is disabled and no literal will be indexed.

		index_lucene_mmap: Enables memory-mapping in lucene indices (e.g., search, spatial).

		index_statistics_cache_capacity: The max capacity for the query pattern cardinality cache that is shared across queries to the same database.

		index_statistics_chains_enabled: If true, Stardog will pre-compute the number of times frequent binary chains occur in the data and will use that information for query optimization.Could be disabled for very large or very complex datasets. Changes to this option will take effect the next time statistics is recomputed.

		index_statistics_characteristic_limit: The max number of characteristic sets computed as a part of the statistical summary of the database. More diverse datasets may require a higher number for more accurate query planning. The downside is higher memory footprint and slower planning

		index_statistics_enable_active_graph: If true, Stardog will adjust the cardinality estimation for a query with based on the size of the active graph. Could be disabled for databases with few large named graphs with non-overlapping data.

		index_statistics_predicate_threshold: If a certain predicate occurs in less than this share of all triples in the data, Stardog will not maintain extended statistics for that predicate.

		index_statistics_ranges_enabled: If true, Stardog will pre-compute the number of common objects for pairs of properties in the dataset. This information is used for query optimization.Could be disabled for very large or very complex datasets. Changes to this option will take effect the next time statistics is recomputed.

		index_statistics_sketch_capacity: The max number of objects that can be added to a sketch data structure before a new sketch is created

		index_statistics_update_automatic: Determines whether statistics are maintained automatically. When set to "true", Stardog will decide when to update statistics as the database is modified through additions and removals and update statistics as needed. If this option is set to "false", Stardog will never update the statistics regardless of how much the database is updated.

		index_statistics_update_blocking_ratio: Once the ratio of updated triples to database size goes over this limit statistics computation will be performed synchronously within the transaction instead of a background thread. Setting this option to a non-positive number (<= 0) will disable blocking updates.

		index_statistics_update_min_size: Minimum number of triples that should be in the database for statistics to be updated automatically

		index_statistics_update_ratio: Ratio of updated triples to the number of triples in the database that triggers the automatic statistics computation in a background thread

		index_writer_merge_limit: Maximum number of triples to keep in memory for merging interleaving additions and removals while querying uncommitted state

		ldap_role_mappings: A mapping from Stardog roles to LDAP groups

		ldap_superusers_group: The name of the group identifying Stardog super users

		ldap_user_class_filter: An LDAP user class filter

		ldap_user_dn_templates: A list of templates to form LDAP names from Stardog usernames

		ldap_user_name_attribute: A property of user DN to extract user name from (if specified, takes priority over DN template)

		literal_comparison_extended: Controls whether query evaluation will use extended literal comparison. If enabled, literals of different datatypes are first compared based on their string values and then based on the string value of their datatypes.

		local_iri_template_excludes: The set of IRI templates representing the form of IRIs which may NOT be present in the subject position of triples in the local database. Used when optimizing queries including both the local database and virtual graphs. IRI templates use the same placeholder syntax as mappings (eg, `{field}`) but the field names are ignored. Templates included here should be used to indicate which IRIs are guaranteed not to be present and should be updated when that changes.

		local_iri_template_includes: The set of IRI templates representing the form of IRIs which may be present in the subject position of triples in the local database. Used when optimizing queries including both the local database and virtual graphs. IRI templates use the same placeholder syntax as mappings (eg, `{field}`) but the field names are ignored. Templates included here should be used to indicate which IRIs may be present and should be updated when that changes.

		progress_monitor_enabled: When enabled, the progress of various tasks will be printed in the server log.

		query_all_graphs: This option controls the behavior for answering queries that don't specify a dataset (FROM or FROM NAMED) in the query. In such cases, the SPARQL specification says that the query should be answered only using the information in default graph (no context). However, sometimes it is desirable to answer such queries using all the information in the database including the default graph and all named graphs. Setting this option to true changes the behavior of Stardog to do this. Queries that specify a dataset are not affected by this option.

		query_describe_strategy: The default DESCRIBE query strategy for the database. Built-in strategies include "default", "cbd" and "bidirectional". See the docs for instructions to create your own describe strategy.

		query_dictionary_overflow_threshold: Configuration option for the max number of entries in the query-local dictionary before a persistent data structure is used (which can spill data to disk)

		query_inline_sqs: Option to control how stored queries should be evaluated inside the Stored Query Service (SQS). If stored queries referenced in SQS are inlined into the parent query some additional optimizations might become possible especially for stored queries involving virtual graphs. But inlined stored queries inherit the dataset of the parent query and might return different results compared to being executed in isolation. Some queries, e.g. stored queries that use path queries or correlation, cannot be inlined at all. The setting `optimizer` allows the optimizer to perform inlining when it is safe and improves query performance. Using the option `always` could cause some SQS executions fail.

		query_memory_exceeds_strategy: Configuration option for determining strategy for the query behaviour once memory limit reached

		query_memory_limit: Configuration option for determining the memory limit used by query

		query_plan_reuse: The conditions under which a cached plan will be reused. "ALWAYS" and "NEVER" determine query plan reuse as you would expect. "CARDINALITY" instructs Stardog to reuse cached query plans for structurally equivalent queries if the cardinality estimations of scans are similar.

		query_timeout: Determines max execution time for query evaluation. This can also be overridden in a query's parameters.  The following unit suffixes are available: "ms" for milliseconds, "s" for seconds, "m" for minutes, and "h" for hours.

		query_update_graph_diff: Configuration option for determining the update procedure that will be used for SPARQL update queries ADD, COPY and MOVE

		query_update_timeout: Determines max execution time for SPARQL update query evaluation. This can also be overridden in a query's parameters.  The following unit suffixes are available: "ms" for milliseconds, "s" for seconds, "m" for minutes, and "h" for hours.

		reasoning_approximate: Enables approximate reasoning. With this flag enabled Stardog will approximate an axiom that is outside the profile Stardog supports and normally ignored. For example, an equivalent class axiom might be split into two subclass axioms and only one subclass axiom is used.

		reasoning_classify_eager: Perform schema classification eagerly when the schema is loaded. Classifying eagerly ensures subclass and equivalence queries between named classes can be answered with a simple lookup. However, if the schema is changing frequently then this option can be turned off so classification is performed only if necessary.

		reasoning_consistency_automatic: Enables automatic consistency checking as part of every query performed with reasoning enabled. If the underlying database did not change since the last consistency check, the check will not be performed.

		reasoning_precompute_non_empty_predicates: If true, Stardog will pre-compute class and property names which have assertions in the data. That can speed-up reasoning but may slow things down when data changes often.

		reasoning_punning_enabled: Enables punning; the ability for an IRI to represent both a class and an individual.

		reasoning_rewriting: Allows one to choose how query patterns are rewritten for reasoning: as a whole (per scope) or individually (per pattern).

		reasoning_sameas: Option to enable owl:sameAs reasoning. When this option is set to "ON", then the reflexive, symmetric, and transitive closure of owl:sameAs triples in the database are computed. When it is set to "FULL", then owl:sameAs inferences are computed based on schema axioms, such as functional properties. See the docs for more information.

		reasoning_schema_graphs: Determines which, if any, named graph or graphs contains the schema (ontology, "TBox") part of the data. The legal value is a comma-separated list of named graph identifiers, including (optionally) the special names, tag:stardog:api:context:default and tag:stardog:api:context:local, which represent the default graph and the union of all local (non-virtual) named graphs and the default graph, respectively. In the context of database configurations only, Stardog will recognize default and * as short forms of those URIs, respectively.

		reasoning_schema_timeout: Timeout for schema reasoning. If schema reasoning cannot be completed in the specified time then only RDFS reasoning will be performed for the schema which might yield incomplete answers for the schema queries. The timeout values specified as test be a positive integer followed by either letter 'h' (for hours), letter 'm' (for minutes), letter 's' (for seconds), or letters 'ms' (for milliseconds). Examples: '1h' for 1 hour, '5m' for 5 minutes, '90s' for 90 seconds, '500ms' for 500 milliseconds.

		reasoning_schemas: Option to specify the schemas and the named graphs that constitute each schema. The value is a comma-separated collection of schema=IRI pairs. There should be one pair for each named graph in a schema. The graphs for the default schema are set via the reasoning.schema.graphs option.

		reasoning_schemas_memory_count: Option to specify the number of schemas to keep in memory. There can be more schemas defined in the database but only this many schemas will be kept in memory and other schemas will be pulled into memory as queries are getting answered. If this limit is too high, the amount of memory used for schemas will increase and might cause memory problems. If it is too low then answering reasoning queries might slow down.

		reasoning_type: Specifies the reasoning type associated with the database, most corresponding to the OWL Profiles of the same name. The following reasoning types are available: RDFS (OWL 2 axioms allowed in RDF Schema), QL (OWL 2 QL axioms), RL (OWL 2 RL axioms), EL (OWL 2 EL axioms), DL (OWL 2 DL axioms), SL (a combination of RDFS, QL, RL and EL axioms + user-defined rules) and NONE (disables reasoning). Any axiom outside the selected type will be ignored by the reasoner.

		reasoning_virtual_graph_enabled: Flag to enable reasoning over virtual graphs and SERVICE clauses.

		search_default_limit: Specify the default limit on the number of results returned from a full-text search (-1 returns all results). This only limits the number of results returned from the Lucene full-text index, not from its containing query.

		search_default_query_operator: Specify the Lucene operator (AND/OR) to use implicitly when searching

		search_enabled: Enables the full-text (unstructured) search index for the database; important for Semantic Search applications.

		search_index_compute_norm: Option to specify that value lengths (norms) should be computed and indexed. This is required for document length to influence scoring rank.

		search_index_contexts_excluded: Option to specify if the collection of contexts in named graphs is going to be leveraged as either excluded or included for literals to be indexed.

		search_index_contexts_filter: Option to specify the collection of contexts in named graphs to be excluded or included for literals to be indexed depending on SearchOptions.SEARCH_CONTEXTS_EXCLUDED option.

		search_index_datatypes: Option to specify the datatypes for which to index literals in Lucene. Literals with other datatypes will not be accessible via full-text search.

		search_index_properties_excluded: Option to specify the excluded properties for literals not to be indexed in Lucene. Literals with these properties cannot be evaluated for indexing.

		search_index_properties_included: Option to specify the only properties for literals to be indexed in Lucene. Please note that if search.index.properties.excluded option is set, this option will have no effect.

		search_index_state: 

		search_index_stopwords: Option to specify the list of the stopwords while indexing. The list of string is to be converted to a CharArraySet data structure of Lucene.

		search_index_token_filters: A sequence of token filter classes. Classes must be implementations of org.apache.lucene.analysis.TokenFilter. Filters will be applied in the order listed. Class names must be qualified by package unless existing in the `org.apache.lucene.analysis` package. The `StopFilter`, if specified, will used the value of the `search.index.stopwords` property.

		search_index_vacuum: This option controls how the full-text index is optimized as a part of database optimization. If set to true, Stardog will use the vacuuming technique to purge text literals which were previously been removed from the data also from the full-text index. The default value is false which means that the index will be rebuilt from scratch. This property is ignored in two cases: if search.optimize=true is explicitly supplied as an argument to 'db optimize' command, or if the index is in a dirty state i.e. it may lack some literals occurring in the data (this normally should not happen unless full-text index has not completed successfully).

		search_index_wordbreak_chars: A set of characters which are used to break words. Whitespace is also included

		search_page_size: Specify the page size used for iteration over results from the full-text index. A page is held in memory, so this count should NOT be large.

		search_reindex_cache_size: Option to specify the cache size of literals that is used for checking if a literal is indexed before.

		search_reindex_tx: Whether literals added during a transaction are automatically indexed. If this flag is set to 'false', then full-text search queries will return incomplete results until the index is rebuilt.

		search_wildcard_search_enabled: Enable support to query the Lucene full-text search index with leading wildcards.

		security_masking_function: SPARQL function to mask values of sensitive properties. There should be just one variable in there which will be replaced by actual sensitive nodes at query runtime.

		security_named_graphs: If enabled, named graphs are an explicit resource type in Stardog’s security model.

		security_properties_sensitive: Comma-separated set of property IRIs to which access is granted explicitly

		security_properties_sensitive_groups: Option to specify the sensitive property groups. The value is a collection of (group name, property IRI) pairs. A property that appears in at least one group is considered sensitive and requires explicit permission to be granted for read access. The  property IRIs in the default group should be defined with the option security.properties.sensitive.

		service_sparql_credentials_passthrough_regex: Specifies SPARQL endpoints for which SERVICE calls are allowed to pass through current credentials.

		service_sparql_result_limit: Limits the number of results generated by SERVICE calls to SPARQL endpoints. A negative value means no limit.

		shacl_shape_graphs: The set of named graphs from which to read the SHACL shapes for validation. Only the shapes that are defined within these names graphs will be validated. By default the shapes in all the local named graphs will be used.

		shacl_targetClass_simple: If true, sh:targetClass will be evaluated based on rdf:type triples only, without following rdfs:subClassOf relations.

		shacl_violation_limit_shape: Limits the number of violation per shape. The default value is -1. This option is introduced for ease of readability of the report on the types of different violations.

		spatial_distance_precision: Specifies the precision used for the distance calculations. The value is the number of significant digits distances used to represent distances. Smaller numbers sacrifice precision for performance. The default is 8. A value of -1 can be provided to compute distances to the maximum precision.

		spatial_enabled: Enables the geospatial search index for the database.

		spatial_result_limit: Specify the default limit on the number of results returned from a geospatial query (-1 returns all results). This only limits the number of results returned from the geospatial index, not from its containing query.

		spatial_result_page_size: Specify the page size used for iteration over results from the spatial index. A page is held in memory, so this count should NOT be large.

		spatial_use_jts: Use JTS (Java Topology Suite) to support more complex spatial structures such as polygons.

		sql_data_graphs: Specifies which graphs will be queried by default via SQL queries. The default value (tag:stardog:api:context:all) is to query all local graphs (default or named) plus any virtual graphs that might be defined. Setting this option to another value will mean any other graph will be ignored by the SQL queries. Use the special graph tag:stardog:api:context:local to query all local graphs but exclude virtual graphs. Multiple graphs or graph aliases can be used as the option value.

		sql_schema_auto: Enables automatic SQL schema generation when one does not exist in the database.

		sql_schema_auto_source: Specifies the input source to use for generating the SQL schema automatically when one does not exist in the database.

		sql_schema_graph: Specifies which named graph in the database is used to read SQL schema mapping.

		transaction_commit_twophase: Enables two phase commit protocol for the cluster (this option has no effect for the single node server). When this option is enabled all the nodes in the cluster will prepare the transaction in the first phase of the commit. This ensures all nodes complete time-consuming operations and only after that the second phase of the commit will start where the coordinator will send the commit command to the other nodes. Once a node completes the commit operation the effects of the transaction will be visible in query results. With this option enabled the period of time where nodes might return different results to queries will be minimized. This option is most useful for long transactions (e.g., transactions that take several minutes or more) where the commit time for each node might differ in a noticeable way without the additional commit phase. For short transactions, enabling this option will not provide visible benefits (especially if transactions complete under a second) and the overhead of the additional commit phase will result in increased transaction times.

		transaction_isolation: Configures isolation level for transactions

		transaction_logging: Option for whether or not the database logs all transactions events to disk. The default when not in Cluster mode is "false", and when in Cluster mode the default is "true".

		transaction_logging_rotation_keep_backups: Determines whether we keep backups of the rotated log file

		transaction_logging_rotation_remove: Determines whether the current log file will be rotated or removed (i.e., truncated)

		transaction_logging_rotation_size: Determines the size (in bytes) at which the transaction log will be rotated

		transaction_logging_use_rotated: Enables using rotated transaction log

		virtual_transparency: Determines the default dataset the database evaluates queries against; if true, the named graphs portion of the dataset will default to local named graphs and accessible virtual graphs; if false (the default), the named graphs portion of the dataset will be limited to local named graphs only.

"""


	auto_schema_reasoning: Optional[bool] = Field(
		alias="auto.schema.reasoning",
		description="""Enables reasoning when automatically generating schemas from OWL. This setting will affect automatic schema generation for GraphQL (if graphql.auto.schema is enabled) and BI/SQL (if sql.schema.auto is enabled).""",
		default=None
	)
	database_archetypes: Optional[List[str]] = Field(
		alias="database.archetypes",
		description="""The name of one or more database archetypes, used to associate ontologies and constraints with new databases. See the docs for instructions to create your own archetype.""",
		default=None
	)
	database_connection_timeout: Optional[duration] = Field(
		alias="database.connection.timeout",
		description="""The amount of time a connection to the database can be open, but inactive, before being automatically closed to reclaim the resources. The following unit suffixes are available: "ms" for milliseconds, "s" for seconds, "m" for minutes, and "h" for hours.""",
		default=None
	)
	database_namespaces: Optional[List[str]] = Field(
		alias="database.namespaces",
		description="""The default namespaces for the database. Legal input is a comma-separated list of <prefix>=<namespace> values.""",
		default=None
	)
	docs_default_rdf_extractors: Optional[str] = Field(
		alias="docs.default.rdf.extractors",
		description="""Comma-separated list of names of RDF extractors to use when processing documents when no RDF extractor names are given. Built-in extractors include tika, text, entities, linked and dictionary. See the docs for instructions to create your own.""",
		default=None
	)
	docs_default_text_extractors: Optional[str] = Field(
		alias="docs.default.text.extractors",
		description="""Comma-separated list of names of text extractors to use when processing documents when no text extractor names are given. See the docs to create your own.""",
		default=None
	)
	docs_filesystem_uri: Optional[str] = Field(
		alias="docs.filesystem.uri",
		description="""A URI indicating which FileSystem provider to use for document storage. In addition to local storage (file:///), documents can be stored on Amazon S3 (s3:///) or document storage can be disabled altogether (none)""",
		default=None
	)
	docs_opennlp_models_path: Optional[str] = Field(
		alias="docs.opennlp.models.path",
		description="""The directory where OpenNLP models are located""",
		default=None
	)
	docs_path: Optional[str] = Field(
		alias="docs.path",
		description="""The path under which documents will be stored. A relative path is relative to the database directory. S3 storage should specify an absolute path with the bucket name as the first part of the path""",
		default=None
	)
	docs_s3_protocol: Optional[str] = Field(
		alias="docs.s3.protocol",
		description="""Protocol used when storing unstructured text documents on S3 (and compatible) stores. Can be set to HTTP to disable TLS/SSL""",
		default=None
	)
	graph_aliases: Optional[bool] = Field(
		alias="graph.aliases",
		description="""Configuration option to enable or disable support for named graph aliases""",
		default=None
	)
	graphql_auto_schema: Optional[bool] = Field(
		alias="graphql.auto.schema",
		description="""Enables automatic generation of the default GraphQL schema if one has not been created by the user.""",
		default=None
	)
	graphql_auto_schema_source: Optional[GraphqlAutoSchemaSource] = Field(
		alias="graphql.auto.schema.source",
		description="""Specifies the input source to use for generating the default GraphQL schema automatically.""",
		default=None
	)
	graphql_data_graphs: Optional[List[str]] = Field(
		alias="graphql.data.graphs",
		description="""Specifies which graphs will be queried by default via GraphQL queries. The default value (tag:stardog:api:context:local) is to query all local graphs (default or named). Use the special graph tag:stardog:api:context:all to query all local graphs plus the virtual graphs. Multiple graphs or graph aliases can be used as the option value.""",
		default=None
	)
	graphql_default_limit: Optional[int] = Field(
		alias="graphql.default.limit",
		description="""The maximum number of top-level objects a GraphQL query can return. The argument "first" can be used within queries to limit results as well.""",
		default=None
	)
	graphql_result_memory_limit: Optional[str] = Field(
		alias="graphql.result.memory.limit",
		description="""The maximum number of heap memory a GraphQL result can use. GraphQL query results are created fully in memory before they are sent back to the client. This limit ensures query results will not use too much memory causing server to run out of memory. GraphQL queries are translated to SPARQL queries and the amount of memory the SPARQL query will use during execution is controlled by the query.memory.limit option.""",
		default=None
	)
	icv_consistency_automatic: Optional[bool] = Field(
		alias="icv.consistency.automatic",
		description="""Enables automatic ICV consistency check as part of transactions. Ensures that both reasoning consistencies and constraint violations are checked during ICV "Guard Mode" validation (with each commit). This is only effective when "icv.reasoning.enabled" is set to true.""",
		default=None
	)
	icv_enabled: Optional[bool] = Field(
		alias="icv.enabled",
		description="""Determines if all database mutations are subject to ICV. When enabled, each commit is inspected to ensure that the contents of the database are valid. Should a transaction attempt to commit invalid data, the commit will fail and the data will not be added/removed.""",
		default=None
	)
	icv_explanation_limit: Optional[int] = Field(
		alias="icv.explanation.limit",
		description="""The number of violations that will be computed and returned in the error message when guard mode is enabled. If the option is set to 0 no explanations will be computed and transaction failure will only indicate there was a violation without specifying which constraint failed.""",
		default=None
	)
	icv_reasoning_enabled: Optional[bool] = Field(
		alias="icv.reasoning.enabled",
		description="""Determines if reasoning is used during ICV.""",
		default=None
	)
	index_bulk_load_sst_txlimit: Optional[int] = Field(
		alias="index.bulk.load.sst.txlimit",
		description="""The threshold of # of quads at which the bulk loading mechanism is used for transactional updates.""",
		default=None
	)
	index_differential_enable_limit: Optional[int] = Field(
		alias="index.differential.enable.limit",
		description="""NOTE: Not used in Stardog v7+. The minimum number of statements in the Stardog database before differential indexes are used.""",
		default=None
	)
	index_differential_merge_limit: Optional[int] = Field(
		alias="index.differential.merge.limit",
		description="""NOTE: Not used in Stardog v7+. The size in number of RDF statements before the differential indexes are merged to the main indexes.""",
		default=None
	)
	index_literals_limit: Optional[int] = Field(
		alias="index.literals.limit",
		description="""Prevents the literal index from growing above this size. When indexed properties store more literals, the system stops indexing them and the literal index is no longer used for query answering.""",
		default=None
	)
	index_literals_merge_limit: Optional[int] = Field(
		alias="index.literals.merge.limit",
		description="""When the number of indexed literals added in transactions become greater than this, they will be added to the main index.""",
		default=None
	)
	index_literals_properties: Optional[List[str]] = Field(
		alias="index.literals.properties",
		description="""Values of these properties will be put in a special literal index to support faster range queries. Provide a comma-separated property IRIs or the special IRI 'tag:stardog:api:property:all' to indicate all properties with supported value types should be indexed. The default value is 'tag:stardog:api:property:none' indicating literal index is disabled and no literal will be indexed.""",
		default=None
	)
	index_lucene_mmap: Optional[bool] = Field(
		alias="index.lucene.mmap",
		description="""Enables memory-mapping in lucene indices (e.g., search, spatial).""",
		default=None
	)
	index_statistics_cache_capacity: Optional[int] = Field(
		alias="index.statistics.cache.capacity",
		description="""The max capacity for the query pattern cardinality cache that is shared across queries to the same database.""",
		default=None
	)
	index_statistics_chains_enabled: Optional[bool] = Field(
		alias="index.statistics.chains.enabled",
		description="""If true, Stardog will pre-compute the number of times frequent binary chains occur in the data and will use that information for query optimization.Could be disabled for very large or very complex datasets. Changes to this option will take effect the next time statistics is recomputed.""",
		default=None
	)
	index_statistics_characteristic_limit: Optional[int] = Field(
		alias="index.statistics.characteristic.limit",
		description="""The max number of characteristic sets computed as a part of the statistical summary of the database. More diverse datasets may require a higher number for more accurate query planning. The downside is higher memory footprint and slower planning""",
		default=None
	)
	index_statistics_enable_active_graph: Optional[bool] = Field(
		alias="index.statistics.enable_active_graph",
		description="""If true, Stardog will adjust the cardinality estimation for a query with based on the size of the active graph. Could be disabled for databases with few large named graphs with non-overlapping data.""",
		default=None
	)
	index_statistics_predicate_threshold: Optional[float] = Field(
		alias="index.statistics.predicate.threshold",
		description="""If a certain predicate occurs in less than this share of all triples in the data, Stardog will not maintain extended statistics for that predicate.""",
		default=None
	)
	index_statistics_ranges_enabled: Optional[bool] = Field(
		alias="index.statistics.ranges.enabled",
		description="""If true, Stardog will pre-compute the number of common objects for pairs of properties in the dataset. This information is used for query optimization.Could be disabled for very large or very complex datasets. Changes to this option will take effect the next time statistics is recomputed.""",
		default=None
	)
	index_statistics_sketch_capacity: Optional[int] = Field(
		alias="index.statistics.sketch.capacity",
		description="""The max number of objects that can be added to a sketch data structure before a new sketch is created""",
		default=None
	)
	index_statistics_update_automatic: Optional[bool] = Field(
		alias="index.statistics.update.automatic",
		description="""Determines whether statistics are maintained automatically. When set to "true", Stardog will decide when to update statistics as the database is modified through additions and removals and update statistics as needed. If this option is set to "false", Stardog will never update the statistics regardless of how much the database is updated.""",
		default=None
	)
	index_statistics_update_blocking_ratio: Optional[float] = Field(
		alias="index.statistics.update.blocking.ratio",
		description="""Once the ratio of updated triples to database size goes over this limit statistics computation will be performed synchronously within the transaction instead of a background thread. Setting this option to a non-positive number (<= 0) will disable blocking updates.""",
		default=None
	)
	index_statistics_update_min_size: Optional[int] = Field(
		alias="index.statistics.update.min.size",
		description="""Minimum number of triples that should be in the database for statistics to be updated automatically""",
		default=None
	)
	index_statistics_update_ratio: Optional[float] = Field(
		alias="index.statistics.update.ratio",
		description="""Ratio of updated triples to the number of triples in the database that triggers the automatic statistics computation in a background thread""",
		default=None
	)
	index_writer_merge_limit: Optional[int] = Field(
		alias="index.writer.merge.limit",
		description="""Maximum number of triples to keep in memory for merging interleaving additions and removals while querying uncommitted state""",
		default=None
	)
	ldap_role_mappings: Optional[str] = Field(
		alias="ldap.role.mappings",
		description="""A mapping from Stardog roles to LDAP groups""",
		default=None
	)
	ldap_superusers_group: Optional[str] = Field(
		alias="ldap.superusers.group",
		description="""The name of the group identifying Stardog super users""",
		default=None
	)
	ldap_user_class_filter: Optional[str] = Field(
		alias="ldap.user.class.filter",
		description="""An LDAP user class filter""",
		default=None
	)
	ldap_user_dn_templates: Optional[str] = Field(
		alias="ldap.user.dn.templates",
		description="""A list of templates to form LDAP names from Stardog usernames""",
		default=None
	)
	ldap_user_name_attribute: Optional[str] = Field(
		alias="ldap.user.name.attribute",
		description="""A property of user DN to extract user name from (if specified, takes priority over DN template)""",
		default=None
	)
	literal_comparison_extended: Optional[bool] = Field(
		alias="literal.comparison.extended",
		description="""Controls whether query evaluation will use extended literal comparison. If enabled, literals of different datatypes are first compared based on their string values and then based on the string value of their datatypes.""",
		default=None
	)
	local_iri_template_excludes: Optional[List[str]] = Field(
		alias="local.iri.template.excludes",
		description="""The set of IRI templates representing the form of IRIs which may NOT be present in the subject position of triples in the local database. Used when optimizing queries including both the local database and virtual graphs. IRI templates use the same placeholder syntax as mappings (eg, `{field}`) but the field names are ignored. Templates included here should be used to indicate which IRIs are guaranteed not to be present and should be updated when that changes.""",
		default=None
	)
	local_iri_template_includes: Optional[List[str]] = Field(
		alias="local.iri.template.includes",
		description="""The set of IRI templates representing the form of IRIs which may be present in the subject position of triples in the local database. Used when optimizing queries including both the local database and virtual graphs. IRI templates use the same placeholder syntax as mappings (eg, `{field}`) but the field names are ignored. Templates included here should be used to indicate which IRIs may be present and should be updated when that changes.""",
		default=None
	)
	progress_monitor_enabled: Optional[bool] = Field(
		alias="progress.monitor.enabled",
		description="""When enabled, the progress of various tasks will be printed in the server log.""",
		default=None
	)
	query_all_graphs: Optional[bool] = Field(
		alias="query.all.graphs",
		description="""This option controls the behavior for answering queries that don't specify a dataset (FROM or FROM NAMED) in the query. In such cases, the SPARQL specification says that the query should be answered only using the information in default graph (no context). However, sometimes it is desirable to answer such queries using all the information in the database including the default graph and all named graphs. Setting this option to true changes the behavior of Stardog to do this. Queries that specify a dataset are not affected by this option.""",
		default=None
	)
	query_describe_strategy: Optional[str] = Field(
		alias="query.describe.strategy",
		description="""The default DESCRIBE query strategy for the database. Built-in strategies include "default", "cbd" and "bidirectional". See the docs for instructions to create your own describe strategy.""",
		default=None
	)
	query_dictionary_overflow_threshold: Optional[int] = Field(
		alias="query.dictionary.overflow.threshold",
		description="""Configuration option for the max number of entries in the query-local dictionary before a persistent data structure is used (which can spill data to disk)""",
		default=None
	)
	query_inline_sqs: Optional[QueryInlineSqs] = Field(
		alias="query.inline.sqs",
		description="""Option to control how stored queries should be evaluated inside the Stored Query Service (SQS). If stored queries referenced in SQS are inlined into the parent query some additional optimizations might become possible especially for stored queries involving virtual graphs. But inlined stored queries inherit the dataset of the parent query and might return different results compared to being executed in isolation. Some queries, e.g. stored queries that use path queries or correlation, cannot be inlined at all. The setting `optimizer` allows the optimizer to perform inlining when it is safe and improves query performance. Using the option `always` could cause some SQS executions fail.""",
		default=None
	)
	query_memory_exceeds_strategy: Optional[QueryMemoryExceedsStrategy] = Field(
		alias="query.memory.exceeds.strategy",
		description="""Configuration option for determining strategy for the query behaviour once memory limit reached""",
		default=None
	)
	query_memory_limit: Optional[str] = Field(
		alias="query.memory.limit",
		description="""Configuration option for determining the memory limit used by query""",
		default=None
	)
	query_plan_reuse: Optional[QueryPlanReuse] = Field(
		alias="query.plan.reuse",
		description="""The conditions under which a cached plan will be reused. "ALWAYS" and "NEVER" determine query plan reuse as you would expect. "CARDINALITY" instructs Stardog to reuse cached query plans for structurally equivalent queries if the cardinality estimations of scans are similar.""",
		default=None
	)
	query_timeout: Optional[duration] = Field(
		alias="query.timeout",
		description="""Determines max execution time for query evaluation. This can also be overridden in a query's parameters.  The following unit suffixes are available: "ms" for milliseconds, "s" for seconds, "m" for minutes, and "h" for hours.""",
		default=None
	)
	query_update_graph_diff: Optional[bool] = Field(
		alias="query.update.graph.diff",
		description="""Configuration option for determining the update procedure that will be used for SPARQL update queries ADD, COPY and MOVE""",
		default=None
	)
	query_update_timeout: Optional[duration] = Field(
		alias="query.update.timeout",
		description="""Determines max execution time for SPARQL update query evaluation. This can also be overridden in a query's parameters.  The following unit suffixes are available: "ms" for milliseconds, "s" for seconds, "m" for minutes, and "h" for hours.""",
		default=None
	)
	reasoning_approximate: Optional[bool] = Field(
		alias="reasoning.approximate",
		description="""Enables approximate reasoning. With this flag enabled Stardog will approximate an axiom that is outside the profile Stardog supports and normally ignored. For example, an equivalent class axiom might be split into two subclass axioms and only one subclass axiom is used.""",
		default=None
	)
	reasoning_classify_eager: Optional[bool] = Field(
		alias="reasoning.classify.eager",
		description="""Perform schema classification eagerly when the schema is loaded. Classifying eagerly ensures subclass and equivalence queries between named classes can be answered with a simple lookup. However, if the schema is changing frequently then this option can be turned off so classification is performed only if necessary.""",
		default=None
	)
	reasoning_consistency_automatic: Optional[bool] = Field(
		alias="reasoning.consistency.automatic",
		description="""Enables automatic consistency checking as part of every query performed with reasoning enabled. If the underlying database did not change since the last consistency check, the check will not be performed.""",
		default=None
	)
	reasoning_precompute_non_empty_predicates: Optional[bool] = Field(
		alias="reasoning.precompute.non_empty.predicates",
		description="""If true, Stardog will pre-compute class and property names which have assertions in the data. That can speed-up reasoning but may slow things down when data changes often.""",
		default=None
	)
	reasoning_punning_enabled: Optional[bool] = Field(
		alias="reasoning.punning.enabled",
		description="""Enables punning; the ability for an IRI to represent both a class and an individual.""",
		default=None
	)
	reasoning_rewriting: Optional[ReasoningRewriting] = Field(
		alias="reasoning.rewriting",
		description="""Allows one to choose how query patterns are rewritten for reasoning: as a whole (per scope) or individually (per pattern).""",
		default=None
	)
	reasoning_sameas: Optional[ReasoningSameas] = Field(
		alias="reasoning.sameas",
		description="""Option to enable owl:sameAs reasoning. When this option is set to "ON", then the reflexive, symmetric, and transitive closure of owl:sameAs triples in the database are computed. When it is set to "FULL", then owl:sameAs inferences are computed based on schema axioms, such as functional properties. See the docs for more information.""",
		default=None
	)
	reasoning_schema_graphs: Optional[List[str]] = Field(
		alias="reasoning.schema.graphs",
		description="""Determines which, if any, named graph or graphs contains the schema (ontology, "TBox") part of the data. The legal value is a comma-separated list of named graph identifiers, including (optionally) the special names, tag:stardog:api:context:default and tag:stardog:api:context:local, which represent the default graph and the union of all local (non-virtual) named graphs and the default graph, respectively. In the context of database configurations only, Stardog will recognize default and * as short forms of those URIs, respectively.""",
		default=None
	)
	reasoning_schema_timeout: Optional[duration] = Field(
		alias="reasoning.schema.timeout",
		description="""Timeout for schema reasoning. If schema reasoning cannot be completed in the specified time then only RDFS reasoning will be performed for the schema which might yield incomplete answers for the schema queries. The timeout values specified as test be a positive integer followed by either letter 'h' (for hours), letter 'm' (for minutes), letter 's' (for seconds), or letters 'ms' (for milliseconds). Examples: '1h' for 1 hour, '5m' for 5 minutes, '90s' for 90 seconds, '500ms' for 500 milliseconds.""",
		default=None
	)
	reasoning_schemas: Optional[List[str]] = Field(
		alias="reasoning.schemas",
		description="""Option to specify the schemas and the named graphs that constitute each schema. The value is a comma-separated collection of schema=IRI pairs. There should be one pair for each named graph in a schema. The graphs for the default schema are set via the reasoning.schema.graphs option.""",
		default=None
	)
	reasoning_schemas_memory_count: Optional[int] = Field(
		alias="reasoning.schemas.memory.count",
		description="""Option to specify the number of schemas to keep in memory. There can be more schemas defined in the database but only this many schemas will be kept in memory and other schemas will be pulled into memory as queries are getting answered. If this limit is too high, the amount of memory used for schemas will increase and might cause memory problems. If it is too low then answering reasoning queries might slow down.""",
		default=None
	)
	reasoning_type: Optional[ReasoningType] = Field(
		alias="reasoning.type",
		description="""Specifies the reasoning type associated with the database, most corresponding to the OWL Profiles of the same name. The following reasoning types are available: RDFS (OWL 2 axioms allowed in RDF Schema), QL (OWL 2 QL axioms), RL (OWL 2 RL axioms), EL (OWL 2 EL axioms), DL (OWL 2 DL axioms), SL (a combination of RDFS, QL, RL and EL axioms + user-defined rules) and NONE (disables reasoning). Any axiom outside the selected type will be ignored by the reasoner.""",
		default=None
	)
	reasoning_virtual_graph_enabled: Optional[bool] = Field(
		alias="reasoning.virtual.graph.enabled",
		description="""Flag to enable reasoning over virtual graphs and SERVICE clauses.""",
		default=None
	)
	search_default_limit: Optional[int] = Field(
		alias="search.default.limit",
		description="""Specify the default limit on the number of results returned from a full-text search (-1 returns all results). This only limits the number of results returned from the Lucene full-text index, not from its containing query.""",
		default=None
	)
	search_default_query_operator: Optional[SearchDefaultQueryOperator] = Field(
		alias="search.default.query.operator",
		description="""Specify the Lucene operator (AND/OR) to use implicitly when searching""",
		default=None
	)
	search_enabled: Optional[bool] = Field(
		alias="search.enabled",
		description="""Enables the full-text (unstructured) search index for the database; important for Semantic Search applications.""",
		default=None
	)
	search_index_compute_norm: Optional[bool] = Field(
		alias="search.index.compute.norm",
		description="""Option to specify that value lengths (norms) should be computed and indexed. This is required for document length to influence scoring rank.""",
		default=None
	)
	search_index_contexts_excluded: Optional[bool] = Field(
		alias="search.index.contexts.excluded",
		description="""Option to specify if the collection of contexts in named graphs is going to be leveraged as either excluded or included for literals to be indexed.""",
		default=None
	)
	search_index_contexts_filter: Optional[List[str]] = Field(
		alias="search.index.contexts.filter",
		description="""Option to specify the collection of contexts in named graphs to be excluded or included for literals to be indexed depending on SearchOptions.SEARCH_CONTEXTS_EXCLUDED option.""",
		default=None
	)
	search_index_datatypes: Optional[List[str]] = Field(
		alias="search.index.datatypes",
		description="""Option to specify the datatypes for which to index literals in Lucene. Literals with other datatypes will not be accessible via full-text search.""",
		default=None
	)
	search_index_properties_excluded: Optional[List[str]] = Field(
		alias="search.index.properties.excluded",
		description="""Option to specify the excluded properties for literals not to be indexed in Lucene. Literals with these properties cannot be evaluated for indexing.""",
		default=None
	)
	search_index_properties_included: Optional[List[str]] = Field(
		alias="search.index.properties.included",
		description="""Option to specify the only properties for literals to be indexed in Lucene. Please note that if search.index.properties.excluded option is set, this option will have no effect.""",
		default=None
	)
	search_index_state: Optional[SearchIndexState] = Field(
		alias="search.index.state",
		description="""""",
		default=None
	)
	search_index_stopwords: Optional[List[str]] = Field(
		alias="search.index.stopwords",
		description="""Option to specify the list of the stopwords while indexing. The list of string is to be converted to a CharArraySet data structure of Lucene.""",
		default=None
	)
	search_index_token_filters: Optional[List[str]] = Field(
		alias="search.index.token.filters",
		description="""A sequence of token filter classes. Classes must be implementations of org.apache.lucene.analysis.TokenFilter. Filters will be applied in the order listed. Class names must be qualified by package unless existing in the `org.apache.lucene.analysis` package. The `StopFilter`, if specified, will used the value of the `search.index.stopwords` property.""",
		default=None
	)
	search_index_vacuum: Optional[bool] = Field(
		alias="search.index.vacuum",
		description="""This option controls how the full-text index is optimized as a part of database optimization. If set to true, Stardog will use the vacuuming technique to purge text literals which were previously been removed from the data also from the full-text index. The default value is false which means that the index will be rebuilt from scratch. This property is ignored in two cases: if search.optimize=true is explicitly supplied as an argument to 'db optimize' command, or if the index is in a dirty state i.e. it may lack some literals occurring in the data (this normally should not happen unless full-text index has not completed successfully).""",
		default=None
	)
	search_index_wordbreak_chars: Optional[str] = Field(
		alias="search.index.wordbreak.chars",
		description="""A set of characters which are used to break words. Whitespace is also included""",
		default=None
	)
	search_page_size: Optional[int] = Field(
		alias="search.page.size",
		description="""Specify the page size used for iteration over results from the full-text index. A page is held in memory, so this count should NOT be large.""",
		default=None
	)
	search_reindex_cache_size: Optional[int] = Field(
		alias="search.reindex.cache.size",
		description="""Option to specify the cache size of literals that is used for checking if a literal is indexed before.""",
		default=None
	)
	search_reindex_tx: Optional[bool] = Field(
		alias="search.reindex.tx",
		description="""Whether literals added during a transaction are automatically indexed. If this flag is set to 'false', then full-text search queries will return incomplete results until the index is rebuilt.""",
		default=None
	)
	search_wildcard_search_enabled: Optional[bool] = Field(
		alias="search.wildcard.search.enabled",
		description="""Enable support to query the Lucene full-text search index with leading wildcards.""",
		default=None
	)
	security_masking_function: Optional[str] = Field(
		alias="security.masking.function",
		description="""SPARQL function to mask values of sensitive properties. There should be just one variable in there which will be replaced by actual sensitive nodes at query runtime.""",
		default=None
	)
	security_named_graphs: Optional[bool] = Field(
		alias="security.named.graphs",
		description="""If enabled, named graphs are an explicit resource type in Stardog’s security model.""",
		default=None
	)
	security_properties_sensitive: Optional[List[str]] = Field(
		alias="security.properties.sensitive",
		description="""Comma-separated set of property IRIs to which access is granted explicitly""",
		default=None
	)
	security_properties_sensitive_groups: Optional[List[sensitive_property_group]] = Field(
		alias="security.properties.sensitive.groups",
		description="""Option to specify the sensitive property groups. The value is a collection of (group name, property IRI) pairs. A property that appears in at least one group is considered sensitive and requires explicit permission to be granted for read access. The  property IRIs in the default group should be defined with the option security.properties.sensitive.""",
		default=None
	)
	service_sparql_credentials_passthrough_regex: Optional[str] = Field(
		alias="service.sparql.credentials.passthrough.regex",
		description="""Specifies SPARQL endpoints for which SERVICE calls are allowed to pass through current credentials.""",
		default=None
	)
	service_sparql_result_limit: Optional[int] = Field(
		alias="service.sparql.result.limit",
		description="""Limits the number of results generated by SERVICE calls to SPARQL endpoints. A negative value means no limit.""",
		default=None
	)
	shacl_shape_graphs: Optional[List[str]] = Field(
		alias="shacl.shape.graphs",
		description="""The set of named graphs from which to read the SHACL shapes for validation. Only the shapes that are defined within these names graphs will be validated. By default the shapes in all the local named graphs will be used.""",
		default=None
	)
	shacl_targetClass_simple: Optional[bool] = Field(
		alias="shacl.targetClass.simple",
		description="""If true, sh:targetClass will be evaluated based on rdf:type triples only, without following rdfs:subClassOf relations.""",
		default=None
	)
	shacl_violation_limit_shape: Optional[int] = Field(
		alias="shacl.violation.limit.shape",
		description="""Limits the number of violation per shape. The default value is -1. This option is introduced for ease of readability of the report on the types of different violations.""",
		default=None
	)
	spatial_distance_precision: Optional[int] = Field(
		alias="spatial.distance.precision",
		description="""Specifies the precision used for the distance calculations. The value is the number of significant digits distances used to represent distances. Smaller numbers sacrifice precision for performance. The default is 8. A value of -1 can be provided to compute distances to the maximum precision.""",
		default=None
	)
	spatial_enabled: Optional[bool] = Field(
		alias="spatial.enabled",
		description="""Enables the geospatial search index for the database.""",
		default=None
	)
	spatial_result_limit: Optional[int] = Field(
		alias="spatial.result.limit",
		description="""Specify the default limit on the number of results returned from a geospatial query (-1 returns all results). This only limits the number of results returned from the geospatial index, not from its containing query.""",
		default=None
	)
	spatial_result_page_size: Optional[int] = Field(
		alias="spatial.result.page_size",
		description="""Specify the page size used for iteration over results from the spatial index. A page is held in memory, so this count should NOT be large.""",
		default=None
	)
	spatial_use_jts: Optional[bool] = Field(
		alias="spatial.use.jts",
		description="""Use JTS (Java Topology Suite) to support more complex spatial structures such as polygons.""",
		default=None
	)
	sql_data_graphs: Optional[List[str]] = Field(
		alias="sql.data.graphs",
		description="""Specifies which graphs will be queried by default via SQL queries. The default value (tag:stardog:api:context:all) is to query all local graphs (default or named) plus any virtual graphs that might be defined. Setting this option to another value will mean any other graph will be ignored by the SQL queries. Use the special graph tag:stardog:api:context:local to query all local graphs but exclude virtual graphs. Multiple graphs or graph aliases can be used as the option value.""",
		default=None
	)
	sql_schema_auto: Optional[bool] = Field(
		alias="sql.schema.auto",
		description="""Enables automatic SQL schema generation when one does not exist in the database.""",
		default=None
	)
	sql_schema_auto_source: Optional[SqlSchemaAutoSource] = Field(
		alias="sql.schema.auto.source",
		description="""Specifies the input source to use for generating the SQL schema automatically when one does not exist in the database.""",
		default=None
	)
	sql_schema_graph: Optional[str] = Field(
		alias="sql.schema.graph",
		description="""Specifies which named graph in the database is used to read SQL schema mapping.""",
		default=None
	)
	transaction_commit_twophase: Optional[bool] = Field(
		alias="transaction.commit.twophase",
		description="""Enables two phase commit protocol for the cluster (this option has no effect for the single node server). When this option is enabled all the nodes in the cluster will prepare the transaction in the first phase of the commit. This ensures all nodes complete time-consuming operations and only after that the second phase of the commit will start where the coordinator will send the commit command to the other nodes. Once a node completes the commit operation the effects of the transaction will be visible in query results. With this option enabled the period of time where nodes might return different results to queries will be minimized. This option is most useful for long transactions (e.g., transactions that take several minutes or more) where the commit time for each node might differ in a noticeable way without the additional commit phase. For short transactions, enabling this option will not provide visible benefits (especially if transactions complete under a second) and the overhead of the additional commit phase will result in increased transaction times.""",
		default=None
	)
	transaction_isolation: Optional[TransactionIsolation] = Field(
		alias="transaction.isolation",
		description="""Configures isolation level for transactions""",
		default=None
	)
	transaction_logging: Optional[bool] = Field(
		alias="transaction.logging",
		description="""Option for whether or not the database logs all transactions events to disk. The default when not in Cluster mode is "false", and when in Cluster mode the default is "true".""",
		default=None
	)
	transaction_logging_rotation_keep_backups: Optional[bool] = Field(
		alias="transaction.logging.rotation.keep_backups",
		description="""Determines whether we keep backups of the rotated log file""",
		default=None
	)
	transaction_logging_rotation_remove: Optional[bool] = Field(
		alias="transaction.logging.rotation.remove",
		description="""Determines whether the current log file will be rotated or removed (i.e., truncated)""",
		default=None
	)
	transaction_logging_rotation_size: Optional[int] = Field(
		alias="transaction.logging.rotation.size",
		description="""Determines the size (in bytes) at which the transaction log will be rotated""",
		default=None
	)
	transaction_logging_use_rotated: Optional[bool] = Field(
		alias="transaction.logging.use.rotated",
		description="""Enables using rotated transaction log""",
		default=None
	)
	virtual_transparency: Optional[bool] = Field(
		alias="virtual.transparency",
		description="""Determines the default dataset the database evaluates queries against; if true, the named graphs portion of the dataset will default to local named graphs and accessible virtual graphs; if false (the default), the named graphs portion of the dataset will be limited to local named graphs only.""",
		default=None
	)


	class Config:
		extra = Extra.forbid
		allow_population_by_field_name = True


class OnlineDatabaseOptions(BaseModel):
	"""Options that can be modified when database is online

		auto_schema_reasoning: Enables reasoning when automatically generating schemas from OWL. This setting will affect automatic schema generation for GraphQL (if graphql.auto.schema is enabled) and BI/SQL (if sql.schema.auto is enabled).

		database_connection_timeout: The amount of time a connection to the database can be open, but inactive, before being automatically closed to reclaim the resources. The following unit suffixes are available: "ms" for milliseconds, "s" for seconds, "m" for minutes, and "h" for hours.

		database_namespaces: The default namespaces for the database. Legal input is a comma-separated list of <prefix>=<namespace> values.

		docs_opennlp_models_path: The directory where OpenNLP models are located

		graphql_auto_schema: Enables automatic generation of the default GraphQL schema if one has not been created by the user.

		graphql_auto_schema_source: Specifies the input source to use for generating the default GraphQL schema automatically.

		graphql_data_graphs: Specifies which graphs will be queried by default via GraphQL queries. The default value (tag:stardog:api:context:local) is to query all local graphs (default or named). Use the special graph tag:stardog:api:context:all to query all local graphs plus the virtual graphs. Multiple graphs or graph aliases can be used as the option value.

		graphql_default_limit: The maximum number of top-level objects a GraphQL query can return. The argument "first" can be used within queries to limit results as well.

		graphql_result_memory_limit: The maximum number of heap memory a GraphQL result can use. GraphQL query results are created fully in memory before they are sent back to the client. This limit ensures query results will not use too much memory causing server to run out of memory. GraphQL queries are translated to SPARQL queries and the amount of memory the SPARQL query will use during execution is controlled by the query.memory.limit option.

		icv_explanation_limit: The number of violations that will be computed and returned in the error message when guard mode is enabled. If the option is set to 0 no explanations will be computed and transaction failure will only indicate there was a violation without specifying which constraint failed.

		index_bulk_load_sst_txlimit: The threshold of # of quads at which the bulk loading mechanism is used for transactional updates.

		index_statistics_chains_enabled: If true, Stardog will pre-compute the number of times frequent binary chains occur in the data and will use that information for query optimization.Could be disabled for very large or very complex datasets. Changes to this option will take effect the next time statistics is recomputed.

		index_statistics_characteristic_limit: The max number of characteristic sets computed as a part of the statistical summary of the database. More diverse datasets may require a higher number for more accurate query planning. The downside is higher memory footprint and slower planning

		index_statistics_predicate_threshold: If a certain predicate occurs in less than this share of all triples in the data, Stardog will not maintain extended statistics for that predicate.

		index_statistics_ranges_enabled: If true, Stardog will pre-compute the number of common objects for pairs of properties in the dataset. This information is used for query optimization.Could be disabled for very large or very complex datasets. Changes to this option will take effect the next time statistics is recomputed.

		index_statistics_sketch_capacity: The max number of objects that can be added to a sketch data structure before a new sketch is created

		index_statistics_update_automatic: Determines whether statistics are maintained automatically. When set to "true", Stardog will decide when to update statistics as the database is modified through additions and removals and update statistics as needed. If this option is set to "false", Stardog will never update the statistics regardless of how much the database is updated.

		index_statistics_update_blocking_ratio: Once the ratio of updated triples to database size goes over this limit statistics computation will be performed synchronously within the transaction instead of a background thread. Setting this option to a non-positive number (<= 0) will disable blocking updates.

		index_statistics_update_min_size: Minimum number of triples that should be in the database for statistics to be updated automatically

		index_statistics_update_ratio: Ratio of updated triples to the number of triples in the database that triggers the automatic statistics computation in a background thread

		ldap_role_mappings: A mapping from Stardog roles to LDAP groups

		ldap_superusers_group: The name of the group identifying Stardog super users

		ldap_user_class_filter: An LDAP user class filter

		ldap_user_dn_templates: A list of templates to form LDAP names from Stardog usernames

		ldap_user_name_attribute: A property of user DN to extract user name from (if specified, takes priority over DN template)

		literal_comparison_extended: Controls whether query evaluation will use extended literal comparison. If enabled, literals of different datatypes are first compared based on their string values and then based on the string value of their datatypes.

		local_iri_template_excludes: The set of IRI templates representing the form of IRIs which may NOT be present in the subject position of triples in the local database. Used when optimizing queries including both the local database and virtual graphs. IRI templates use the same placeholder syntax as mappings (eg, `{field}`) but the field names are ignored. Templates included here should be used to indicate which IRIs are guaranteed not to be present and should be updated when that changes.

		local_iri_template_includes: The set of IRI templates representing the form of IRIs which may be present in the subject position of triples in the local database. Used when optimizing queries including both the local database and virtual graphs. IRI templates use the same placeholder syntax as mappings (eg, `{field}`) but the field names are ignored. Templates included here should be used to indicate which IRIs may be present and should be updated when that changes.

		progress_monitor_enabled: When enabled, the progress of various tasks will be printed in the server log.

		query_all_graphs: This option controls the behavior for answering queries that don't specify a dataset (FROM or FROM NAMED) in the query. In such cases, the SPARQL specification says that the query should be answered only using the information in default graph (no context). However, sometimes it is desirable to answer such queries using all the information in the database including the default graph and all named graphs. Setting this option to true changes the behavior of Stardog to do this. Queries that specify a dataset are not affected by this option.

		query_describe_strategy: The default DESCRIBE query strategy for the database. Built-in strategies include "default", "cbd" and "bidirectional". See the docs for instructions to create your own describe strategy.

		query_dictionary_overflow_threshold: Configuration option for the max number of entries in the query-local dictionary before a persistent data structure is used (which can spill data to disk)

		query_inline_sqs: Option to control how stored queries should be evaluated inside the Stored Query Service (SQS). If stored queries referenced in SQS are inlined into the parent query some additional optimizations might become possible especially for stored queries involving virtual graphs. But inlined stored queries inherit the dataset of the parent query and might return different results compared to being executed in isolation. Some queries, e.g. stored queries that use path queries or correlation, cannot be inlined at all. The setting `optimizer` allows the optimizer to perform inlining when it is safe and improves query performance. Using the option `always` could cause some SQS executions fail.

		query_memory_exceeds_strategy: Configuration option for determining strategy for the query behaviour once memory limit reached

		query_memory_limit: Configuration option for determining the memory limit used by query

		query_plan_reuse: The conditions under which a cached plan will be reused. "ALWAYS" and "NEVER" determine query plan reuse as you would expect. "CARDINALITY" instructs Stardog to reuse cached query plans for structurally equivalent queries if the cardinality estimations of scans are similar.

		query_timeout: Determines max execution time for query evaluation. This can also be overridden in a query's parameters.  The following unit suffixes are available: "ms" for milliseconds, "s" for seconds, "m" for minutes, and "h" for hours.

		query_update_graph_diff: Configuration option for determining the update procedure that will be used for SPARQL update queries ADD, COPY and MOVE

		query_update_timeout: Determines max execution time for SPARQL update query evaluation. This can also be overridden in a query's parameters.  The following unit suffixes are available: "ms" for milliseconds, "s" for seconds, "m" for minutes, and "h" for hours.

		reasoning_precompute_non_empty_predicates: If true, Stardog will pre-compute class and property names which have assertions in the data. That can speed-up reasoning but may slow things down when data changes often.

		reasoning_schema_graphs: Determines which, if any, named graph or graphs contains the schema (ontology, "TBox") part of the data. The legal value is a comma-separated list of named graph identifiers, including (optionally) the special names, tag:stardog:api:context:default and tag:stardog:api:context:local, which represent the default graph and the union of all local (non-virtual) named graphs and the default graph, respectively. In the context of database configurations only, Stardog will recognize default and * as short forms of those URIs, respectively.

		reasoning_schema_timeout: Timeout for schema reasoning. If schema reasoning cannot be completed in the specified time then only RDFS reasoning will be performed for the schema which might yield incomplete answers for the schema queries. The timeout values specified as test be a positive integer followed by either letter 'h' (for hours), letter 'm' (for minutes), letter 's' (for seconds), or letters 'ms' (for milliseconds). Examples: '1h' for 1 hour, '5m' for 5 minutes, '90s' for 90 seconds, '500ms' for 500 milliseconds.

		reasoning_schemas: Option to specify the schemas and the named graphs that constitute each schema. The value is a comma-separated collection of schema=IRI pairs. There should be one pair for each named graph in a schema. The graphs for the default schema are set via the reasoning.schema.graphs option.

		reasoning_virtual_graph_enabled: Flag to enable reasoning over virtual graphs and SERVICE clauses.

		search_default_limit: Specify the default limit on the number of results returned from a full-text search (-1 returns all results). This only limits the number of results returned from the Lucene full-text index, not from its containing query.

		search_default_query_operator: Specify the Lucene operator (AND/OR) to use implicitly when searching

		search_index_state: 

		search_index_vacuum: This option controls how the full-text index is optimized as a part of database optimization. If set to true, Stardog will use the vacuuming technique to purge text literals which were previously been removed from the data also from the full-text index. The default value is false which means that the index will be rebuilt from scratch. This property is ignored in two cases: if search.optimize=true is explicitly supplied as an argument to 'db optimize' command, or if the index is in a dirty state i.e. it may lack some literals occurring in the data (this normally should not happen unless full-text index has not completed successfully).

		search_page_size: Specify the page size used for iteration over results from the full-text index. A page is held in memory, so this count should NOT be large.

		search_reindex_cache_size: Option to specify the cache size of literals that is used for checking if a literal is indexed before.

		search_reindex_tx: Whether literals added during a transaction are automatically indexed. If this flag is set to 'false', then full-text search queries will return incomplete results until the index is rebuilt.

		search_wildcard_search_enabled: Enable support to query the Lucene full-text search index with leading wildcards.

		security_masking_function: SPARQL function to mask values of sensitive properties. There should be just one variable in there which will be replaced by actual sensitive nodes at query runtime.

		security_named_graphs: If enabled, named graphs are an explicit resource type in Stardog’s security model.

		security_properties_sensitive: Comma-separated set of property IRIs to which access is granted explicitly

		security_properties_sensitive_groups: Option to specify the sensitive property groups. The value is a collection of (group name, property IRI) pairs. A property that appears in at least one group is considered sensitive and requires explicit permission to be granted for read access. The  property IRIs in the default group should be defined with the option security.properties.sensitive.

		service_sparql_credentials_passthrough_regex: Specifies SPARQL endpoints for which SERVICE calls are allowed to pass through current credentials.

		service_sparql_result_limit: Limits the number of results generated by SERVICE calls to SPARQL endpoints. A negative value means no limit.

		shacl_targetClass_simple: If true, sh:targetClass will be evaluated based on rdf:type triples only, without following rdfs:subClassOf relations.

		spatial_distance_precision: Specifies the precision used for the distance calculations. The value is the number of significant digits distances used to represent distances. Smaller numbers sacrifice precision for performance. The default is 8. A value of -1 can be provided to compute distances to the maximum precision.

		spatial_result_limit: Specify the default limit on the number of results returned from a geospatial query (-1 returns all results). This only limits the number of results returned from the geospatial index, not from its containing query.

		sql_data_graphs: Specifies which graphs will be queried by default via SQL queries. The default value (tag:stardog:api:context:all) is to query all local graphs (default or named) plus any virtual graphs that might be defined. Setting this option to another value will mean any other graph will be ignored by the SQL queries. Use the special graph tag:stardog:api:context:local to query all local graphs but exclude virtual graphs. Multiple graphs or graph aliases can be used as the option value.

		transaction_commit_twophase: Enables two phase commit protocol for the cluster (this option has no effect for the single node server). When this option is enabled all the nodes in the cluster will prepare the transaction in the first phase of the commit. This ensures all nodes complete time-consuming operations and only after that the second phase of the commit will start where the coordinator will send the commit command to the other nodes. Once a node completes the commit operation the effects of the transaction will be visible in query results. With this option enabled the period of time where nodes might return different results to queries will be minimized. This option is most useful for long transactions (e.g., transactions that take several minutes or more) where the commit time for each node might differ in a noticeable way without the additional commit phase. For short transactions, enabling this option will not provide visible benefits (especially if transactions complete under a second) and the overhead of the additional commit phase will result in increased transaction times.

		virtual_transparency: Determines the default dataset the database evaluates queries against; if true, the named graphs portion of the dataset will default to local named graphs and accessible virtual graphs; if false (the default), the named graphs portion of the dataset will be limited to local named graphs only.

"""


	auto_schema_reasoning: Optional[bool] = Field(
		alias="auto.schema.reasoning",
		description="""Enables reasoning when automatically generating schemas from OWL. This setting will affect automatic schema generation for GraphQL (if graphql.auto.schema is enabled) and BI/SQL (if sql.schema.auto is enabled).""",
		default=None
	)
	database_connection_timeout: Optional[duration] = Field(
		alias="database.connection.timeout",
		description="""The amount of time a connection to the database can be open, but inactive, before being automatically closed to reclaim the resources. The following unit suffixes are available: "ms" for milliseconds, "s" for seconds, "m" for minutes, and "h" for hours.""",
		default=None
	)
	database_namespaces: Optional[List[str]] = Field(
		alias="database.namespaces",
		description="""The default namespaces for the database. Legal input is a comma-separated list of <prefix>=<namespace> values.""",
		default=None
	)
	docs_opennlp_models_path: Optional[str] = Field(
		alias="docs.opennlp.models.path",
		description="""The directory where OpenNLP models are located""",
		default=None
	)
	graphql_auto_schema: Optional[bool] = Field(
		alias="graphql.auto.schema",
		description="""Enables automatic generation of the default GraphQL schema if one has not been created by the user.""",
		default=None
	)
	graphql_auto_schema_source: Optional[GraphqlAutoSchemaSource] = Field(
		alias="graphql.auto.schema.source",
		description="""Specifies the input source to use for generating the default GraphQL schema automatically.""",
		default=None
	)
	graphql_data_graphs: Optional[List[str]] = Field(
		alias="graphql.data.graphs",
		description="""Specifies which graphs will be queried by default via GraphQL queries. The default value (tag:stardog:api:context:local) is to query all local graphs (default or named). Use the special graph tag:stardog:api:context:all to query all local graphs plus the virtual graphs. Multiple graphs or graph aliases can be used as the option value.""",
		default=None
	)
	graphql_default_limit: Optional[int] = Field(
		alias="graphql.default.limit",
		description="""The maximum number of top-level objects a GraphQL query can return. The argument "first" can be used within queries to limit results as well.""",
		default=None
	)
	graphql_result_memory_limit: Optional[str] = Field(
		alias="graphql.result.memory.limit",
		description="""The maximum number of heap memory a GraphQL result can use. GraphQL query results are created fully in memory before they are sent back to the client. This limit ensures query results will not use too much memory causing server to run out of memory. GraphQL queries are translated to SPARQL queries and the amount of memory the SPARQL query will use during execution is controlled by the query.memory.limit option.""",
		default=None
	)
	icv_explanation_limit: Optional[int] = Field(
		alias="icv.explanation.limit",
		description="""The number of violations that will be computed and returned in the error message when guard mode is enabled. If the option is set to 0 no explanations will be computed and transaction failure will only indicate there was a violation without specifying which constraint failed.""",
		default=None
	)
	index_bulk_load_sst_txlimit: Optional[int] = Field(
		alias="index.bulk.load.sst.txlimit",
		description="""The threshold of # of quads at which the bulk loading mechanism is used for transactional updates.""",
		default=None
	)
	index_statistics_chains_enabled: Optional[bool] = Field(
		alias="index.statistics.chains.enabled",
		description="""If true, Stardog will pre-compute the number of times frequent binary chains occur in the data and will use that information for query optimization.Could be disabled for very large or very complex datasets. Changes to this option will take effect the next time statistics is recomputed.""",
		default=None
	)
	index_statistics_characteristic_limit: Optional[int] = Field(
		alias="index.statistics.characteristic.limit",
		description="""The max number of characteristic sets computed as a part of the statistical summary of the database. More diverse datasets may require a higher number for more accurate query planning. The downside is higher memory footprint and slower planning""",
		default=None
	)
	index_statistics_predicate_threshold: Optional[float] = Field(
		alias="index.statistics.predicate.threshold",
		description="""If a certain predicate occurs in less than this share of all triples in the data, Stardog will not maintain extended statistics for that predicate.""",
		default=None
	)
	index_statistics_ranges_enabled: Optional[bool] = Field(
		alias="index.statistics.ranges.enabled",
		description="""If true, Stardog will pre-compute the number of common objects for pairs of properties in the dataset. This information is used for query optimization.Could be disabled for very large or very complex datasets. Changes to this option will take effect the next time statistics is recomputed.""",
		default=None
	)
	index_statistics_sketch_capacity: Optional[int] = Field(
		alias="index.statistics.sketch.capacity",
		description="""The max number of objects that can be added to a sketch data structure before a new sketch is created""",
		default=None
	)
	index_statistics_update_automatic: Optional[bool] = Field(
		alias="index.statistics.update.automatic",
		description="""Determines whether statistics are maintained automatically. When set to "true", Stardog will decide when to update statistics as the database is modified through additions and removals and update statistics as needed. If this option is set to "false", Stardog will never update the statistics regardless of how much the database is updated.""",
		default=None
	)
	index_statistics_update_blocking_ratio: Optional[float] = Field(
		alias="index.statistics.update.blocking.ratio",
		description="""Once the ratio of updated triples to database size goes over this limit statistics computation will be performed synchronously within the transaction instead of a background thread. Setting this option to a non-positive number (<= 0) will disable blocking updates.""",
		default=None
	)
	index_statistics_update_min_size: Optional[int] = Field(
		alias="index.statistics.update.min.size",
		description="""Minimum number of triples that should be in the database for statistics to be updated automatically""",
		default=None
	)
	index_statistics_update_ratio: Optional[float] = Field(
		alias="index.statistics.update.ratio",
		description="""Ratio of updated triples to the number of triples in the database that triggers the automatic statistics computation in a background thread""",
		default=None
	)
	ldap_role_mappings: Optional[str] = Field(
		alias="ldap.role.mappings",
		description="""A mapping from Stardog roles to LDAP groups""",
		default=None
	)
	ldap_superusers_group: Optional[str] = Field(
		alias="ldap.superusers.group",
		description="""The name of the group identifying Stardog super users""",
		default=None
	)
	ldap_user_class_filter: Optional[str] = Field(
		alias="ldap.user.class.filter",
		description="""An LDAP user class filter""",
		default=None
	)
	ldap_user_dn_templates: Optional[str] = Field(
		alias="ldap.user.dn.templates",
		description="""A list of templates to form LDAP names from Stardog usernames""",
		default=None
	)
	ldap_user_name_attribute: Optional[str] = Field(
		alias="ldap.user.name.attribute",
		description="""A property of user DN to extract user name from (if specified, takes priority over DN template)""",
		default=None
	)
	literal_comparison_extended: Optional[bool] = Field(
		alias="literal.comparison.extended",
		description="""Controls whether query evaluation will use extended literal comparison. If enabled, literals of different datatypes are first compared based on their string values and then based on the string value of their datatypes.""",
		default=None
	)
	local_iri_template_excludes: Optional[List[str]] = Field(
		alias="local.iri.template.excludes",
		description="""The set of IRI templates representing the form of IRIs which may NOT be present in the subject position of triples in the local database. Used when optimizing queries including both the local database and virtual graphs. IRI templates use the same placeholder syntax as mappings (eg, `{field}`) but the field names are ignored. Templates included here should be used to indicate which IRIs are guaranteed not to be present and should be updated when that changes.""",
		default=None
	)
	local_iri_template_includes: Optional[List[str]] = Field(
		alias="local.iri.template.includes",
		description="""The set of IRI templates representing the form of IRIs which may be present in the subject position of triples in the local database. Used when optimizing queries including both the local database and virtual graphs. IRI templates use the same placeholder syntax as mappings (eg, `{field}`) but the field names are ignored. Templates included here should be used to indicate which IRIs may be present and should be updated when that changes.""",
		default=None
	)
	progress_monitor_enabled: Optional[bool] = Field(
		alias="progress.monitor.enabled",
		description="""When enabled, the progress of various tasks will be printed in the server log.""",
		default=None
	)
	query_all_graphs: Optional[bool] = Field(
		alias="query.all.graphs",
		description="""This option controls the behavior for answering queries that don't specify a dataset (FROM or FROM NAMED) in the query. In such cases, the SPARQL specification says that the query should be answered only using the information in default graph (no context). However, sometimes it is desirable to answer such queries using all the information in the database including the default graph and all named graphs. Setting this option to true changes the behavior of Stardog to do this. Queries that specify a dataset are not affected by this option.""",
		default=None
	)
	query_describe_strategy: Optional[str] = Field(
		alias="query.describe.strategy",
		description="""The default DESCRIBE query strategy for the database. Built-in strategies include "default", "cbd" and "bidirectional". See the docs for instructions to create your own describe strategy.""",
		default=None
	)
	query_dictionary_overflow_threshold: Optional[int] = Field(
		alias="query.dictionary.overflow.threshold",
		description="""Configuration option for the max number of entries in the query-local dictionary before a persistent data structure is used (which can spill data to disk)""",
		default=None
	)
	query_inline_sqs: Optional[QueryInlineSqs] = Field(
		alias="query.inline.sqs",
		description="""Option to control how stored queries should be evaluated inside the Stored Query Service (SQS). If stored queries referenced in SQS are inlined into the parent query some additional optimizations might become possible especially for stored queries involving virtual graphs. But inlined stored queries inherit the dataset of the parent query and might return different results compared to being executed in isolation. Some queries, e.g. stored queries that use path queries or correlation, cannot be inlined at all. The setting `optimizer` allows the optimizer to perform inlining when it is safe and improves query performance. Using the option `always` could cause some SQS executions fail.""",
		default=None
	)
	query_memory_exceeds_strategy: Optional[QueryMemoryExceedsStrategy] = Field(
		alias="query.memory.exceeds.strategy",
		description="""Configuration option for determining strategy for the query behaviour once memory limit reached""",
		default=None
	)
	query_memory_limit: Optional[str] = Field(
		alias="query.memory.limit",
		description="""Configuration option for determining the memory limit used by query""",
		default=None
	)
	query_plan_reuse: Optional[QueryPlanReuse] = Field(
		alias="query.plan.reuse",
		description="""The conditions under which a cached plan will be reused. "ALWAYS" and "NEVER" determine query plan reuse as you would expect. "CARDINALITY" instructs Stardog to reuse cached query plans for structurally equivalent queries if the cardinality estimations of scans are similar.""",
		default=None
	)
	query_timeout: Optional[duration] = Field(
		alias="query.timeout",
		description="""Determines max execution time for query evaluation. This can also be overridden in a query's parameters.  The following unit suffixes are available: "ms" for milliseconds, "s" for seconds, "m" for minutes, and "h" for hours.""",
		default=None
	)
	query_update_graph_diff: Optional[bool] = Field(
		alias="query.update.graph.diff",
		description="""Configuration option for determining the update procedure that will be used for SPARQL update queries ADD, COPY and MOVE""",
		default=None
	)
	query_update_timeout: Optional[duration] = Field(
		alias="query.update.timeout",
		description="""Determines max execution time for SPARQL update query evaluation. This can also be overridden in a query's parameters.  The following unit suffixes are available: "ms" for milliseconds, "s" for seconds, "m" for minutes, and "h" for hours.""",
		default=None
	)
	reasoning_precompute_non_empty_predicates: Optional[bool] = Field(
		alias="reasoning.precompute.non_empty.predicates",
		description="""If true, Stardog will pre-compute class and property names which have assertions in the data. That can speed-up reasoning but may slow things down when data changes often.""",
		default=None
	)
	reasoning_schema_graphs: Optional[List[str]] = Field(
		alias="reasoning.schema.graphs",
		description="""Determines which, if any, named graph or graphs contains the schema (ontology, "TBox") part of the data. The legal value is a comma-separated list of named graph identifiers, including (optionally) the special names, tag:stardog:api:context:default and tag:stardog:api:context:local, which represent the default graph and the union of all local (non-virtual) named graphs and the default graph, respectively. In the context of database configurations only, Stardog will recognize default and * as short forms of those URIs, respectively.""",
		default=None
	)
	reasoning_schema_timeout: Optional[duration] = Field(
		alias="reasoning.schema.timeout",
		description="""Timeout for schema reasoning. If schema reasoning cannot be completed in the specified time then only RDFS reasoning will be performed for the schema which might yield incomplete answers for the schema queries. The timeout values specified as test be a positive integer followed by either letter 'h' (for hours), letter 'm' (for minutes), letter 's' (for seconds), or letters 'ms' (for milliseconds). Examples: '1h' for 1 hour, '5m' for 5 minutes, '90s' for 90 seconds, '500ms' for 500 milliseconds.""",
		default=None
	)
	reasoning_schemas: Optional[List[str]] = Field(
		alias="reasoning.schemas",
		description="""Option to specify the schemas and the named graphs that constitute each schema. The value is a comma-separated collection of schema=IRI pairs. There should be one pair for each named graph in a schema. The graphs for the default schema are set via the reasoning.schema.graphs option.""",
		default=None
	)
	reasoning_virtual_graph_enabled: Optional[bool] = Field(
		alias="reasoning.virtual.graph.enabled",
		description="""Flag to enable reasoning over virtual graphs and SERVICE clauses.""",
		default=None
	)
	search_default_limit: Optional[int] = Field(
		alias="search.default.limit",
		description="""Specify the default limit on the number of results returned from a full-text search (-1 returns all results). This only limits the number of results returned from the Lucene full-text index, not from its containing query.""",
		default=None
	)
	search_default_query_operator: Optional[SearchDefaultQueryOperator] = Field(
		alias="search.default.query.operator",
		description="""Specify the Lucene operator (AND/OR) to use implicitly when searching""",
		default=None
	)
	search_index_state: Optional[SearchIndexState] = Field(
		alias="search.index.state",
		description="""""",
		default=None
	)
	search_index_vacuum: Optional[bool] = Field(
		alias="search.index.vacuum",
		description="""This option controls how the full-text index is optimized as a part of database optimization. If set to true, Stardog will use the vacuuming technique to purge text literals which were previously been removed from the data also from the full-text index. The default value is false which means that the index will be rebuilt from scratch. This property is ignored in two cases: if search.optimize=true is explicitly supplied as an argument to 'db optimize' command, or if the index is in a dirty state i.e. it may lack some literals occurring in the data (this normally should not happen unless full-text index has not completed successfully).""",
		default=None
	)
	search_page_size: Optional[int] = Field(
		alias="search.page.size",
		description="""Specify the page size used for iteration over results from the full-text index. A page is held in memory, so this count should NOT be large.""",
		default=None
	)
	search_reindex_cache_size: Optional[int] = Field(
		alias="search.reindex.cache.size",
		description="""Option to specify the cache size of literals that is used for checking if a literal is indexed before.""",
		default=None
	)
	search_reindex_tx: Optional[bool] = Field(
		alias="search.reindex.tx",
		description="""Whether literals added during a transaction are automatically indexed. If this flag is set to 'false', then full-text search queries will return incomplete results until the index is rebuilt.""",
		default=None
	)
	search_wildcard_search_enabled: Optional[bool] = Field(
		alias="search.wildcard.search.enabled",
		description="""Enable support to query the Lucene full-text search index with leading wildcards.""",
		default=None
	)
	security_masking_function: Optional[str] = Field(
		alias="security.masking.function",
		description="""SPARQL function to mask values of sensitive properties. There should be just one variable in there which will be replaced by actual sensitive nodes at query runtime.""",
		default=None
	)
	security_named_graphs: Optional[bool] = Field(
		alias="security.named.graphs",
		description="""If enabled, named graphs are an explicit resource type in Stardog’s security model.""",
		default=None
	)
	security_properties_sensitive: Optional[List[str]] = Field(
		alias="security.properties.sensitive",
		description="""Comma-separated set of property IRIs to which access is granted explicitly""",
		default=None
	)
	security_properties_sensitive_groups: Optional[List[sensitive_property_group]] = Field(
		alias="security.properties.sensitive.groups",
		description="""Option to specify the sensitive property groups. The value is a collection of (group name, property IRI) pairs. A property that appears in at least one group is considered sensitive and requires explicit permission to be granted for read access. The  property IRIs in the default group should be defined with the option security.properties.sensitive.""",
		default=None
	)
	service_sparql_credentials_passthrough_regex: Optional[str] = Field(
		alias="service.sparql.credentials.passthrough.regex",
		description="""Specifies SPARQL endpoints for which SERVICE calls are allowed to pass through current credentials.""",
		default=None
	)
	service_sparql_result_limit: Optional[int] = Field(
		alias="service.sparql.result.limit",
		description="""Limits the number of results generated by SERVICE calls to SPARQL endpoints. A negative value means no limit.""",
		default=None
	)
	shacl_targetClass_simple: Optional[bool] = Field(
		alias="shacl.targetClass.simple",
		description="""If true, sh:targetClass will be evaluated based on rdf:type triples only, without following rdfs:subClassOf relations.""",
		default=None
	)
	spatial_distance_precision: Optional[int] = Field(
		alias="spatial.distance.precision",
		description="""Specifies the precision used for the distance calculations. The value is the number of significant digits distances used to represent distances. Smaller numbers sacrifice precision for performance. The default is 8. A value of -1 can be provided to compute distances to the maximum precision.""",
		default=None
	)
	spatial_result_limit: Optional[int] = Field(
		alias="spatial.result.limit",
		description="""Specify the default limit on the number of results returned from a geospatial query (-1 returns all results). This only limits the number of results returned from the geospatial index, not from its containing query.""",
		default=None
	)
	sql_data_graphs: Optional[List[str]] = Field(
		alias="sql.data.graphs",
		description="""Specifies which graphs will be queried by default via SQL queries. The default value (tag:stardog:api:context:all) is to query all local graphs (default or named) plus any virtual graphs that might be defined. Setting this option to another value will mean any other graph will be ignored by the SQL queries. Use the special graph tag:stardog:api:context:local to query all local graphs but exclude virtual graphs. Multiple graphs or graph aliases can be used as the option value.""",
		default=None
	)
	transaction_commit_twophase: Optional[bool] = Field(
		alias="transaction.commit.twophase",
		description="""Enables two phase commit protocol for the cluster (this option has no effect for the single node server). When this option is enabled all the nodes in the cluster will prepare the transaction in the first phase of the commit. This ensures all nodes complete time-consuming operations and only after that the second phase of the commit will start where the coordinator will send the commit command to the other nodes. Once a node completes the commit operation the effects of the transaction will be visible in query results. With this option enabled the period of time where nodes might return different results to queries will be minimized. This option is most useful for long transactions (e.g., transactions that take several minutes or more) where the commit time for each node might differ in a noticeable way without the additional commit phase. For short transactions, enabling this option will not provide visible benefits (especially if transactions complete under a second) and the overhead of the additional commit phase will result in increased transaction times.""",
		default=None
	)
	virtual_transparency: Optional[bool] = Field(
		alias="virtual.transparency",
		description="""Determines the default dataset the database evaluates queries against; if true, the named graphs portion of the dataset will default to local named graphs and accessible virtual graphs; if false (the default), the named graphs portion of the dataset will be limited to local named graphs only.""",
		default=None
	)


	class Config:
		extra = Extra.forbid
		allow_population_by_field_name = True


MutableDatabaseOptions = Union[OnlineDatabaseOptions, OfflineDatabaseOptions]
